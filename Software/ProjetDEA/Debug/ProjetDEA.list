
ProjetDEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005414  08005414  00015414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005498  08005498  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a0  080054a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080054a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000068  08005510  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005510  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121ec  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d5  00000000  00000000  000322c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000346a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e00  00000000  00000000  00035870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b9be  00000000  00000000  00036670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014579  00000000  00000000  0005202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ada65  00000000  00000000  000665a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005348  00000000  00000000  0011400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00119354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053fc 	.word	0x080053fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080053fc 	.word	0x080053fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800057a:	2201      	movs	r2, #1
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <__io_putchar+0x20>)
 800057e:	f003 fa55 	bl	8003a2c <HAL_UART_Transmit>
  return ch;
 8000582:	687b      	ldr	r3, [r7, #4]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200001f8 	.word	0x200001f8

08000590 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__io_getchar+0x38>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2208      	movs	r2, #8
 80005a0:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a2:	1df9      	adds	r1, r7, #7
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005a8:	2201      	movs	r2, #1
 80005aa:	4807      	ldr	r0, [pc, #28]	; (80005c8 <__io_getchar+0x38>)
 80005ac:	f003 fac8 	bl	8003b40 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_getchar+0x38>)
 80005ba:	f003 fa37 	bl	8003a2c <HAL_UART_Transmit>
  return ch;
 80005be:	79fb      	ldrb	r3, [r7, #7]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001f8 	.word	0x200001f8

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdd4 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f85f 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 fa93 	bl	8000b04 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005de:	f000 f8df 	bl	80007a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005e2:	f000 fa2f 	bl	8000a44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 fa5d 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80005ea:	f000 f89b 	bl	8000724 <MX_I2C3_Init>
  MX_TIM2_Init();
 80005ee:	f000 f9a7 	bl	8000940 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int state = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
	  	  while(state == 0){
 80005f6:	e021      	b.n	800063c <main+0x70>
	  		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <main+0xc4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	22fa      	movs	r2, #250	; 0xfa
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
	  		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 8000600:	2110      	movs	r1, #16
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 f8ab 	bl	8001760 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d115      	bne.n	800063c <main+0x70>
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1250);
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <main+0xc4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
	  			  state = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
	  			  printf("jaaj \n\r");
 800061e:	481d      	ldr	r0, [pc, #116]	; (8000694 <main+0xc8>)
 8000620:	f004 f878 	bl	8004714 <iprintf>
	  			  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 8000624:	e002      	b.n	800062c <main+0x60>
	  				  HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fe1e 	bl	8001268 <HAL_Delay>
	  			  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 800062c:	2110      	movs	r1, #16
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f001 f895 	bl	8001760 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f4      	beq.n	8000626 <main+0x5a>
	  	  while(state == 0){
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0da      	beq.n	80005f8 <main+0x2c>
	  			  }
	  		  }
	  	  }
	  	  while(state == 1){
 8000642:	e021      	b.n	8000688 <main+0xbc>
	  		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1250);
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <main+0xc4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
	  		  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 800064e:	2110      	movs	r1, #16
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f884 	bl	8001760 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d114      	bne.n	8000688 <main+0xbc>
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0xc4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	22fa      	movs	r2, #250	; 0xfa
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
	  			  state = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
	  			  printf("jaaj \n\r");
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <main+0xc8>)
 800066c:	f004 f852 	bl	8004714 <iprintf>
	  			  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 8000670:	e002      	b.n	8000678 <main+0xac>
	  				  HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 fdf8 	bl	8001268 <HAL_Delay>
	  			  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)==0){
 8000678:	2110      	movs	r1, #16
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f001 f86f 	bl	8001760 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0f4      	beq.n	8000672 <main+0xa6>
	  	  while(state == 1){
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d0da      	beq.n	8000644 <main+0x78>
  {
 800068e:	e7b0      	b.n	80005f2 <main+0x26>
 8000690:	200000d8 	.word	0x200000d8
 8000694:	08005414 	.word	0x08005414

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b096      	sub	sp, #88	; 0x58
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2244      	movs	r2, #68	; 0x44
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 f889 	bl	80047be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f001 f9bf 	bl	8001a40 <HAL_PWREx_ControlVoltageScaling>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c8:	f000 fa8c 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006cc:	2310      	movs	r3, #16
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fa01 	bl	8001aec <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006f0:	f000 fa78 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fe4f 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000718:	f000 fa64 	bl	8000be4 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3758      	adds	r7, #88	; 0x58
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C3_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C3_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C3_Init+0x74>)
 8000730:	f640 6214 	movw	r2, #3604	; 0xe14
 8000734:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_I2C3_Init+0x74>)
 800073e:	2201      	movs	r2, #1
 8000740:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2C3_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_I2C3_Init+0x74>)
 8000762:	f001 f82d 	bl	80017c0 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fa3a 	bl	8000be4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_I2C3_Init+0x74>)
 8000774:	f001 f8bf 	bl	80018f6 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 fa31 	bl	8000be4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C3_Init+0x74>)
 8000786:	f001 f901 	bl	800198c <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 fa28 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000084 	.word	0x20000084
 800079c:	40005c00 	.word	0x40005c00

080007a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09a      	sub	sp, #104	; 0x68
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	222c      	movs	r2, #44	; 0x2c
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 ffef 	bl	80047be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e0:	4b55      	ldr	r3, [pc, #340]	; (8000938 <MX_TIM1_Init+0x198>)
 80007e2:	4a56      	ldr	r2, [pc, #344]	; (800093c <MX_TIM1_Init+0x19c>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80007e6:	4b54      	ldr	r3, [pc, #336]	; (8000938 <MX_TIM1_Init+0x198>)
 80007e8:	2207      	movs	r2, #7
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b52      	ldr	r3, [pc, #328]	; (8000938 <MX_TIM1_Init+0x198>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80007f2:	4b51      	ldr	r3, [pc, #324]	; (8000938 <MX_TIM1_Init+0x198>)
 80007f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80007f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <MX_TIM1_Init+0x198>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <MX_TIM1_Init+0x198>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <MX_TIM1_Init+0x198>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080c:	484a      	ldr	r0, [pc, #296]	; (8000938 <MX_TIM1_Init+0x198>)
 800080e:	f002 f979 	bl	8002b04 <HAL_TIM_Base_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000818:	f000 f9e4 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000820:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000826:	4619      	mov	r1, r3
 8000828:	4843      	ldr	r0, [pc, #268]	; (8000938 <MX_TIM1_Init+0x198>)
 800082a:	f002 fb37 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000834:	f000 f9d6 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000838:	483f      	ldr	r0, [pc, #252]	; (8000938 <MX_TIM1_Init+0x198>)
 800083a:	f002 f9ba 	bl	8002bb2 <HAL_TIM_PWM_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000844:	f000 f9ce 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000854:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000858:	4619      	mov	r1, r3
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <MX_TIM1_Init+0x198>)
 800085c:	f002 ff64 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000866:	f000 f9bd 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088a:	2200      	movs	r2, #0
 800088c:	4619      	mov	r1, r3
 800088e:	482a      	ldr	r0, [pc, #168]	; (8000938 <MX_TIM1_Init+0x198>)
 8000890:	f002 f9f0 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800089a:	f000 f9a3 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a2:	2204      	movs	r2, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4824      	ldr	r0, [pc, #144]	; (8000938 <MX_TIM1_Init+0x198>)
 80008a8:	f002 f9e4 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008b2:	f000 f997 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ba:	2208      	movs	r2, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	481e      	ldr	r0, [pc, #120]	; (8000938 <MX_TIM1_Init+0x198>)
 80008c0:	f002 f9d8 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008ca:	f000 f98b 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d2:	220c      	movs	r2, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_TIM1_Init+0x198>)
 80008d8:	f002 f9cc 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80008e2:	f000 f97f 	bl	8000be4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM1_Init+0x198>)
 800091c:	f002 ff6a 	bl	80037f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000926:	f000 f95d 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM1_Init+0x198>)
 800092c:	f000 fa2c 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3768      	adds	r7, #104	; 0x68
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000d8 	.word	0x200000d8
 800093c:	40012c00 	.word	0x40012c00

08000940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000974:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000978:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <MX_TIM2_Init+0x100>)
 800097c:	2207      	movs	r2, #7
 800097e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000988:	f242 720f 	movw	r2, #9999	; 0x270f
 800098c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099a:	4829      	ldr	r0, [pc, #164]	; (8000a40 <MX_TIM2_Init+0x100>)
 800099c:	f002 f8b2 	bl	8002b04 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f91d 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_TIM2_Init+0x100>)
 80009b8:	f002 fa70 	bl	8002e9c <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009c2:	f000 f90f 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <MX_TIM2_Init+0x100>)
 80009c8:	f002 f8f3 	bl	8002bb2 <HAL_TIM_PWM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009d2:	f000 f907 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4816      	ldr	r0, [pc, #88]	; (8000a40 <MX_TIM2_Init+0x100>)
 80009e6:	f002 fe9f 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009f0:	f000 f8f8 	bl	8000be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f4:	2360      	movs	r3, #96	; 0x60
 80009f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000a0c:	f002 f932 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a16:	f000 f8e5 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000a22:	f002 f927 	bl	8002c74 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a2c:	f000 f8da 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM2_Init+0x100>)
 8000a32:	f000 f9a9 	bl	8000d88 <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3738      	adds	r7, #56	; 0x38
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000124 	.word	0x20000124

08000a44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <MX_USART1_UART_Init+0x5c>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_USART1_UART_Init+0x58>)
 8000a88:	f002 ff2c 	bl	80038e4 <HAL_UART_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a92:	f000 f8a7 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000170 	.word	0x20000170
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART2_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x58>)
 8000ae8:	f002 ff4a 	bl	8003980 <HAL_HalfDuplex_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f877 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001f8 	.word	0x200001f8
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b2a      	ldr	r3, [pc, #168]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_GPIO_Init+0xd8>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fe1c 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2128      	movs	r1, #40	; 0x28
 8000b5c:	4820      	ldr	r0, [pc, #128]	; (8000be0 <MX_GPIO_Init+0xdc>)
 8000b5e:	f000 fe17 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_6_Pin BTN_5_Pin BTN_4_Pin BTN_3_Pin
                           BTN_7_Pin */
  GPIO_InitStruct.Pin = BTN_6_Pin|BTN_5_Pin|BTN_4_Pin|BTN_3_Pin
 8000b62:	f241 0378 	movw	r3, #4216	; 0x1078
 8000b66:	60fb      	str	r3, [r7, #12]
                          |BTN_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f000 fc7f 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_1_Pin;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4813      	ldr	r0, [pc, #76]	; (8000be0 <MX_GPIO_Init+0xdc>)
 8000b92:	f000 fc73 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	4619      	mov	r1, r3
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb2:	f000 fc63 	bl	800147c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000bb6:	2328      	movs	r3, #40	; 0x28
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0xdc>)
 8000bce:	f000 fc55 	bl	800147c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3720      	adds	r7, #32
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b098      	sub	sp, #96	; 0x60
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	2234      	movs	r2, #52	; 0x34
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 fdb0 	bl	80047be <memset>
  if(hi2c->Instance==I2C3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <HAL_I2C_MspInit+0xe0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d153      	bne.n	8000d10 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c72:	f107 0318 	add.w	r3, r7, #24
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fdbe 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c82:	f7ff ffaf 	bl	8000be4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f000 fbd2 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cdc:	2312      	movs	r3, #18
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_I2C_MspInit+0xe8>)
 8000cf4:	f000 fbc2 	bl	800147c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000cfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d02:	6593      	str	r3, [r2, #88]	; 0x58
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_I2C_MspInit+0xe4>)
 8000d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3760      	adds	r7, #96	; 0x60
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40005c00 	.word	0x40005c00
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_TIM_Base_MspInit+0x5c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d10c      	bne.n	8000d50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d40:	6613      	str	r3, [r2, #96]	; 0x60
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d4e:	e010      	b.n	8000d72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d58:	d10b      	bne.n	8000d72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_TIM_Base_MspInit+0x60>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40012c00 	.word	0x40012c00
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <HAL_TIM_MspPostInit+0xac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11e      	bne.n	8000de8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000dc2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f000 fb4b 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000de6:	e021      	b.n	8000e2c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df0:	d11c      	bne.n	8000e2c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_TIM_MspPostInit+0xb0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f000 fb28 	bl	800147c <HAL_GPIO_Init>
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012c00 	.word	0x40012c00
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b098      	sub	sp, #96	; 0x60
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	2234      	movs	r2, #52	; 0x34
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fcae 	bl	80047be <memset>
  if(huart->Instance==USART1)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <HAL_UART_MspInit+0x120>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d136      	bne.n	8000eda <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 fcbd 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e84:	f7ff feae 	bl	8000be4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e88:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e92:	6613      	str	r3, [r2, #96]	; 0x60
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eb8:	23c0      	movs	r3, #192	; 0xc0
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4824      	ldr	r0, [pc, #144]	; (8000f64 <HAL_UART_MspInit+0x128>)
 8000ed4:	f000 fad2 	bl	800147c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ed8:	e03b      	b.n	8000f52 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_UART_MspInit+0x12c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d136      	bne.n	8000f52 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fc81 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8000efc:	f7ff fe72 	bl	8000be4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0x124>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f30:	2304      	movs	r3, #4
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f40:	2307      	movs	r3, #7
 8000f42:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f000 fa95 	bl	800147c <HAL_GPIO_Init>
}
 8000f52:	bf00      	nop
 8000f54:	3760      	adds	r7, #96	; 0x60
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	40004400 	.word	0x40004400

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb8:	f000 f936 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e00a      	b.n	8000fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd2:	f7ff fadd 	bl	8000590 <__io_getchar>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	60ba      	str	r2, [r7, #8]
 8000fde:	b2ca      	uxtb	r2, r1
 8000fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	697a      	ldr	r2, [r7, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf0      	blt.n	8000fd2 <_read+0x12>
  }

  return len;
 8000ff0:	687b      	ldr	r3, [r7, #4]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	e009      	b.n	8001020 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff faa9 	bl	800056c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf1      	blt.n	800100c <_write+0x12>
  }
  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_close>:

int _close(int file)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105a:	605a      	str	r2, [r3, #4]
  return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_isatty>:

int _isatty(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f003 fbc6 	bl	800485c <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000a000 	.word	0x2000a000
 80010fc:	00000400 	.word	0x00000400
 8001100:	20000280 	.word	0x20000280
 8001104:	200003d8 	.word	0x200003d8

08001108 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f003 fb85 	bl	8004868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fa35 	bl	80005cc <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001170:	080054a8 	.word	0x080054a8
  ldr r2, =_sbss
 8001174:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001178:	200003d4 	.word	0x200003d4

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f943 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fd26 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_InitTick+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f941 	bl	8001462 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f000 f919 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_InitTick+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e007      	b.n	8001210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e004      	b.n	8001210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e001      	b.n	8001210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000008 	.word	0x20000008
 800124c:	20000284 	.word	0x20000284

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000284 	.word	0x20000284

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff47 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff5c 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffb0 	bl	80013d0 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e14e      	b.n	800172a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8140 	beq.w	8001724 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d005      	beq.n	80014bc <HAL_GPIO_Init+0x40>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d130      	bne.n	800151e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f2:	2201      	movs	r2, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	091b      	lsrs	r3, r3, #4
 8001508:	f003 0201 	and.w	r2, r3, #1
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b03      	cmp	r3, #3
 8001528:	d017      	beq.n	800155a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d123      	bne.n	80015ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691a      	ldr	r2, [r3, #16]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	6939      	ldr	r1, [r7, #16]
 80015aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	2203      	movs	r2, #3
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 809a 	beq.w	8001724 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_GPIO_Init+0x2cc>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f4:	4a54      	ldr	r2, [pc, #336]	; (8001748 <HAL_GPIO_Init+0x2cc>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6613      	str	r3, [r2, #96]	; 0x60
 80015fc:	4b52      	ldr	r3, [pc, #328]	; (8001748 <HAL_GPIO_Init+0x2cc>)
 80015fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001608:	4a50      	ldr	r2, [pc, #320]	; (800174c <HAL_GPIO_Init+0x2d0>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	220f      	movs	r2, #15
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001632:	d013      	beq.n	800165c <HAL_GPIO_Init+0x1e0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_GPIO_Init+0x2d4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00d      	beq.n	8001658 <HAL_GPIO_Init+0x1dc>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a45      	ldr	r2, [pc, #276]	; (8001754 <HAL_GPIO_Init+0x2d8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d007      	beq.n	8001654 <HAL_GPIO_Init+0x1d8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a44      	ldr	r2, [pc, #272]	; (8001758 <HAL_GPIO_Init+0x2dc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_GPIO_Init+0x1d4>
 800164c:	2303      	movs	r3, #3
 800164e:	e006      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 8001650:	2307      	movs	r3, #7
 8001652:	e004      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 8001654:	2302      	movs	r3, #2
 8001656:	e002      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_GPIO_Init+0x1e2>
 800165c:	2300      	movs	r3, #0
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	f002 0203 	and.w	r2, r2, #3
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	4093      	lsls	r3, r2
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166e:	4937      	ldr	r1, [pc, #220]	; (800174c <HAL_GPIO_Init+0x2d0>)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	089b      	lsrs	r3, r3, #2
 8001674:	3302      	adds	r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800167c:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_GPIO_Init+0x2e0>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a0:	4a2e      	ldr	r2, [pc, #184]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_GPIO_Init+0x2e0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_GPIO_Init+0x2e0>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f aea9 	bne.w	800148c <HAL_GPIO_Init+0x10>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	40021000 	.word	0x40021000
 800174c:	40010000 	.word	0x40010000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800
 8001758:	48000c00 	.word	0x48000c00
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e08d      	b.n	80018ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fa26 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	e006      	b.n	8001848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d108      	bne.n	8001862 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e007      	b.n	8001872 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69d9      	ldr	r1, [r3, #28]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b20      	cmp	r3, #32
 800190a:	d138      	bne.n	800197e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001916:	2302      	movs	r3, #2
 8001918:	e032      	b.n	8001980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2224      	movs	r2, #36	; 0x24
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001948:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0201 	orr.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800197e:	2302      	movs	r3, #2
  }
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b20      	cmp	r3, #32
 80019a0:	d139      	bne.n	8001a16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019ac:	2302      	movs	r3, #2
 80019ae:	e033      	b.n	8001a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2224      	movs	r2, #36	; 0x24
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40007000 	.word	0x40007000

08001a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a4e:	d130      	bne.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5c:	d038      	beq.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2232      	movs	r2, #50	; 0x32
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9b      	lsrs	r3, r3, #18
 8001a80:	3301      	adds	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a84:	e002      	b.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a98:	d102      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f2      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d110      	bne.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e00f      	b.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d007      	beq.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ac8:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	431bde83 	.word	0x431bde83

08001aec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f000 bc4f 	b.w	800239e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b00:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0a:	4b95      	ldr	r3, [pc, #596]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80e6 	beq.w	8001cee <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4c>
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	f040 808d 	bne.w	8001c4a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 8089 	bne.w	8001c4a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b38:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_RCC_OscConfig+0x66>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f000 bc26 	b.w	800239e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b56:	4b82      	ldr	r3, [pc, #520]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_RCC_OscConfig+0x80>
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6a:	e005      	b.n	8001b78 <HAL_RCC_OscConfig+0x8c>
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d224      	bcs.n	8001bc6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fdd9 	bl	8002738 <RCC_SetFlashLatencyFromMSIRange>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f000 bc06 	b.w	800239e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a72      	ldr	r2, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	496d      	ldr	r1, [pc, #436]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	4968      	ldr	r1, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e025      	b.n	8001c12 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	4960      	ldr	r1, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be4:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	495b      	ldr	r1, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd98 	bl	8002738 <RCC_SetFlashLatencyFromMSIRange>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e3c5      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c12:	f000 fccd 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b51      	ldr	r3, [pc, #324]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	4950      	ldr	r1, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x278>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c32:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff faba 	bl	80011b0 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c40:	7dfb      	ldrb	r3, [r7, #23]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d052      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	e3a9      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d032      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff faf7 	bl	8001250 <HAL_GetTick>
 8001c62:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c66:	f7ff faf3 	bl	8001250 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e392      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c78:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a35      	ldr	r2, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b33      	ldr	r3, [pc, #204]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	4930      	ldr	r1, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	492b      	ldr	r1, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
 8001cb6:	e01a      	b.n	8001cee <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fac4 	bl	8001250 <HAL_GetTick>
 8001cc8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fac0 	bl	8001250 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e35f      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e0>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d073      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d10e      	bne.n	8001d24 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d063      	beq.n	8001de0 <HAL_RCC_OscConfig+0x2f4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d15f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e33c      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x250>
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e025      	b.n	8001d88 <HAL_RCC_OscConfig+0x29c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d44:	d114      	bne.n	8001d70 <HAL_RCC_OscConfig+0x284>
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a02      	ldr	r2, [pc, #8]	; (8001d60 <HAL_RCC_OscConfig+0x274>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e013      	b.n	8001d88 <HAL_RCC_OscConfig+0x29c>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	0800541c 	.word	0x0800541c
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a8e      	ldr	r2, [pc, #568]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a8b      	ldr	r2, [pc, #556]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa5e 	bl	8001250 <HAL_GetTick>
 8001d94:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fa5a 	bl	8001250 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	; 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e2f9      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2ac>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff fa4a 	bl	8001250 <HAL_GetTick>
 8001dbc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fa46 	bl	8001250 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	; 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e2e5      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd2:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d060      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x314>
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d119      	bne.n	8001e2e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d116      	bne.n	8001e2e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_OscConfig+0x32c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e2c2      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	061b      	lsls	r3, r3, #24
 8001e26:	4962      	ldr	r1, [pc, #392]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2c:	e040      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d023      	beq.n	8001e7e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5d      	ldr	r2, [pc, #372]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff fa05 	bl	8001250 <HAL_GetTick>
 8001e46:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fa01 	bl	8001250 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e2a0      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e5c:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	494e      	ldr	r1, [pc, #312]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7ff f9e1 	bl	8001250 <HAL_GetTick>
 8001e8e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7ff f9dd 	bl	8001250 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e27c      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8082 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d05f      	beq.n	8001f86 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d037      	beq.n	8001f4c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e254      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001efe:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f0e:	f7ff f99f 	bl	8001250 <HAL_GetTick>
 8001f12:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff f99b 	bl	8001250 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e23a      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ef      	bne.n	8001f16 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	f023 0210 	bic.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f978 	bl	8001250 <HAL_GetTick>
 8001f60:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7ff f974 	bl	8001250 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b11      	cmp	r3, #17
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e213      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ef      	beq.n	8001f64 <HAL_RCC_OscConfig+0x478>
 8001f84:	e01d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff f95b 	bl	8001250 <HAL_GetTick>
 8001f9a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7ff f957 	bl	8001250 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d903      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1f6      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
 8001fb0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4ba9      	ldr	r3, [pc, #676]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ed      	bne.n	8001f9e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80bd 	beq.w	800214a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fd6:	4ba1      	ldr	r3, [pc, #644]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10e      	bne.n	8002000 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b9e      	ldr	r3, [pc, #632]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8001fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe6:	4a9d      	ldr	r2, [pc, #628]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6593      	str	r3, [r2, #88]	; 0x58
 8001fee:	4b9b      	ldr	r3, [pc, #620]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002000:	4b97      	ldr	r3, [pc, #604]	; (8002260 <HAL_RCC_OscConfig+0x774>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d118      	bne.n	800203e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200c:	4b94      	ldr	r3, [pc, #592]	; (8002260 <HAL_RCC_OscConfig+0x774>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a93      	ldr	r2, [pc, #588]	; (8002260 <HAL_RCC_OscConfig+0x774>)
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002018:	f7ff f91a 	bl	8001250 <HAL_GetTick>
 800201c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7ff f916 	bl	8001250 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1b5      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x774>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02c      	beq.n	80020a4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800204a:	4b84      	ldr	r3, [pc, #528]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205c:	497f      	ldr	r1, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002070:	4b7a      	ldr	r3, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	4a79      	ldr	r2, [pc, #484]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002080:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002090:	e018      	b.n	80020c4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a70      	ldr	r2, [pc, #448]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020a4:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a6c      	ldr	r2, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a68      	ldr	r2, [pc, #416]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f8c0 	bl	8001250 <HAL_GetTick>
 80020d0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff f8bc 	bl	8001250 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e159      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	4b5c      	ldr	r3, [pc, #368]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCC_OscConfig+0x5e8>
 80020f8:	e01d      	b.n	8002136 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff f8a9 	bl	8001250 <HAL_GetTick>
 80020fe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f8a5 	bl	8001250 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e142      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	4b50      	ldr	r3, [pc, #320]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002126:	4b4d      	ldr	r3, [pc, #308]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800212e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b47      	ldr	r3, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01c      	beq.n	8002198 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002164:	4a3d      	ldr	r2, [pc, #244]	; (800225c <HAL_RCC_OscConfig+0x770>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7ff f86f 	bl	8001250 <HAL_GetTick>
 8002172:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002176:	f7ff f86b 	bl	8001250 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e10a      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800218a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ef      	beq.n	8002176 <HAL_RCC_OscConfig+0x68a>
 8002196:	e01b      	b.n	80021d0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219e:	4a2f      	ldr	r2, [pc, #188]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7ff f852 	bl	8001250 <HAL_GetTick>
 80021ac:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7ff f84e 	bl	8001250 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0ed      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80021c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ef      	bne.n	80021b0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80e1 	beq.w	800239c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	2b02      	cmp	r3, #2
 80021e0:	f040 80b5 	bne.w	800234e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x770>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d124      	bne.n	8002242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	3b01      	subs	r3, #1
 8002204:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11b      	bne.n	8002242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d113      	bne.n	8002242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d109      	bne.n	8002242 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	085b      	lsrs	r3, r3, #1
 800223a:	3b01      	subs	r3, #1
 800223c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d05f      	beq.n	8002302 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	d05a      	beq.n	80022fe <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x770>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002254:	f7fe fffc 	bl	8001250 <HAL_GetTick>
 8002258:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225a:	e00c      	b.n	8002276 <HAL_RCC_OscConfig+0x78a>
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe fff4 	bl	8001250 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e093      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002276:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_RCC_OscConfig+0x8c0>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002292:	3a01      	subs	r2, #1
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800229c:	0212      	lsls	r2, r2, #8
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a4:	0852      	lsrs	r2, r2, #1
 80022a6:	3a01      	subs	r2, #1
 80022a8:	0552      	lsls	r2, r2, #21
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b0:	0852      	lsrs	r2, r2, #1
 80022b2:	3a01      	subs	r2, #1
 80022b4:	0652      	lsls	r2, r2, #25
 80022b6:	430a      	orrs	r2, r1
 80022b8:	493b      	ldr	r1, [pc, #236]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022be:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a39      	ldr	r2, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4a36      	ldr	r2, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d6:	f7fe ffbb 	bl	8001250 <HAL_GetTick>
 80022da:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7fe ffb7 	bl	8001250 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e056      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fc:	e04e      	b.n	800239c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e04d      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d146      	bne.n	800239c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a25      	ldr	r2, [pc, #148]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002318:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4a22      	ldr	r2, [pc, #136]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002324:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002326:	f7fe ff93 	bl	8001250 <HAL_GetTick>
 800232a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe ff8f 	bl	8001250 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e02e      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x842>
 800234c:	e026      	b.n	800239c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d021      	beq.n	8002398 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe ff76 	bl	8001250 <HAL_GetTick>
 8002364:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff72 	bl	8001250 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e011      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237a:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_RCC_OscConfig+0x8bc>)
 800238c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002390:	f023 0303 	bic.w	r3, r3, #3
 8002394:	60d3      	str	r3, [r2, #12]
 8002396:	e001      	b.n	800239c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	f99f808c 	.word	0xf99f808c

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0e7      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b75      	ldr	r3, [pc, #468]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d910      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b72      	ldr	r3, [pc, #456]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	4970      	ldr	r1, [pc, #448]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b6e      	ldr	r3, [pc, #440]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0cf      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d010      	beq.n	8002422 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	4b66      	ldr	r3, [pc, #408]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	429a      	cmp	r2, r3
 800240e:	d908      	bls.n	8002422 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4960      	ldr	r1, [pc, #384]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d04c      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d121      	bne.n	8002486 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0a6      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d115      	bne.n	8002486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e09a      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002466:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e08e      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e086      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002486:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 0203 	bic.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4943      	ldr	r1, [pc, #268]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002498:	f7fe feda 	bl	8001250 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	e00a      	b.n	80024b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a0:	f7fe fed6 	bl	8001250 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e06e      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 020c 	and.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d208      	bcs.n	80024f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	492b      	ldr	r1, [pc, #172]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b29      	ldr	r3, [pc, #164]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d210      	bcs.n	8002526 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 0207 	bic.w	r2, r3, #7
 800250c:	4923      	ldr	r1, [pc, #140]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_ClockConfig+0x1ec>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e036      	b.n	8002594 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002532:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4918      	ldr	r1, [pc, #96]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4910      	ldr	r1, [pc, #64]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002564:	f000 f824 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	490b      	ldr	r1, [pc, #44]	; (80025a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002582:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1fc>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fe11 	bl	80011b0 <HAL_InitTick>
 800258e:	4603      	mov	r3, r0
 8002590:	72fb      	strb	r3, [r7, #11]

  return status;
 8002592:	7afb      	ldrb	r3, [r7, #11]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40022000 	.word	0x40022000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	0800541c 	.word	0x0800541c
 80025a8:	20000000 	.word	0x20000000
 80025ac:	20000004 	.word	0x20000004

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x34>
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d121      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d11e      	bne.n	8002622 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f6:	0a1b      	lsrs	r3, r3, #8
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e005      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800260c:	4a2b      	ldr	r2, [pc, #172]	; (80026bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002614:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002620:	e00a      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d102      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	e004      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d101      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002636:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d134      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0xa6>
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d003      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0xac>
 8002654:	e005      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002658:	617b      	str	r3, [r7, #20]
      break;
 800265a:	e005      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800265e:	617b      	str	r3, [r7, #20]
      break;
 8002660:	e002      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	617b      	str	r3, [r7, #20]
      break;
 8002666:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	3301      	adds	r3, #1
 8002674:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	fb03 f202 	mul.w	r2, r3, r2
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	0e5b      	lsrs	r3, r3, #25
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	3301      	adds	r3, #1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a8:	69bb      	ldr	r3, [r7, #24]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3724      	adds	r7, #36	; 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08005434 	.word	0x08005434
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e4:	f7ff fff0 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f6:	5ccb      	ldrb	r3, [r1, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	0800542c 	.word	0x0800542c

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002710:	f7ff ffda 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0adb      	lsrs	r3, r3, #11
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	0800542c 	.word	0x0800542c

08002738 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002750:	f7ff f968 	bl	8001a24 <HAL_PWREx_GetVoltageRange>
 8002754:	6178      	str	r0, [r7, #20]
 8002756:	e014      	b.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	4a24      	ldr	r2, [pc, #144]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002762:	6593      	str	r3, [r2, #88]	; 0x58
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002770:	f7ff f958 	bl	8001a24 <HAL_PWREx_GetVoltageRange>
 8002774:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002776:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002780:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002788:	d10b      	bne.n	80027a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d919      	bls.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2ba0      	cmp	r3, #160	; 0xa0
 8002794:	d902      	bls.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002796:	2302      	movs	r3, #2
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e013      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	e010      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b80      	cmp	r3, #128	; 0x80
 80027a6:	d902      	bls.n	80027ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027a8:	2303      	movs	r3, #3
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	e00a      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b80      	cmp	r3, #128	; 0x80
 80027b2:	d102      	bne.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b4:	2302      	movs	r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	e004      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b70      	cmp	r3, #112	; 0x70
 80027be:	d101      	bne.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c0:	2301      	movs	r3, #1
 80027c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 0207 	bic.w	r2, r3, #7
 80027cc:	4909      	ldr	r1, [pc, #36]	; (80027f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d001      	beq.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40022000 	.word	0x40022000

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002800:	2300      	movs	r3, #0
 8002802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002804:	2300      	movs	r3, #0
 8002806:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 809e 	beq.w	8002952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b40      	ldr	r3, [pc, #256]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a39      	ldr	r2, [pc, #228]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002858:	f7fe fcfa 	bl	8001250 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285e:	e009      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fcf6 	bl	8001250 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	74fb      	strb	r3, [r7, #19]
        break;
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15a      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002886:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002890:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01e      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d019      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ae:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1b      	ldr	r2, [pc, #108]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcb6 	bl	8001250 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e6:	e00b      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe fcb2 	bl	8001250 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d902      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	74fb      	strb	r3, [r7, #19]
            break;
 80028fe:	e006      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0ec      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800292a:	e009      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
 8002930:	e006      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002940:	7c7b      	ldrb	r3, [r7, #17]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d105      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002946:	4b6e      	ldr	r3, [pc, #440]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a6d      	ldr	r2, [pc, #436]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295e:	4b68      	ldr	r3, [pc, #416]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4964      	ldr	r1, [pc, #400]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002980:	4b5f      	ldr	r3, [pc, #380]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 020c 	bic.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	495c      	ldr	r1, [pc, #368]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a2:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4953      	ldr	r1, [pc, #332]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c4:	4b4e      	ldr	r3, [pc, #312]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	494b      	ldr	r1, [pc, #300]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	4942      	ldr	r1, [pc, #264]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a08:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	493a      	ldr	r1, [pc, #232]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4931      	ldr	r1, [pc, #196]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4929      	ldr	r1, [pc, #164]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4920      	ldr	r1, [pc, #128]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	4918      	ldr	r1, [pc, #96]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	490a      	ldr	r1, [pc, #40]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e049      	b.n	8002baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f8fa 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 fa74 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e049      	b.n	8002c58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d106      	bne.n	8002bde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f841 	bl	8002c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f000 fa1d 	bl	8003030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0ff      	b.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b14      	cmp	r3, #20
 8002c9e:	f200 80f0 	bhi.w	8002e82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cfd 	.word	0x08002cfd
 8002cac:	08002e83 	.word	0x08002e83
 8002cb0:	08002e83 	.word	0x08002e83
 8002cb4:	08002e83 	.word	0x08002e83
 8002cb8:	08002d3d 	.word	0x08002d3d
 8002cbc:	08002e83 	.word	0x08002e83
 8002cc0:	08002e83 	.word	0x08002e83
 8002cc4:	08002e83 	.word	0x08002e83
 8002cc8:	08002d7f 	.word	0x08002d7f
 8002ccc:	08002e83 	.word	0x08002e83
 8002cd0:	08002e83 	.word	0x08002e83
 8002cd4:	08002e83 	.word	0x08002e83
 8002cd8:	08002dbf 	.word	0x08002dbf
 8002cdc:	08002e83 	.word	0x08002e83
 8002ce0:	08002e83 	.word	0x08002e83
 8002ce4:	08002e83 	.word	0x08002e83
 8002ce8:	08002e01 	.word	0x08002e01
 8002cec:	08002e83 	.word	0x08002e83
 8002cf0:	08002e83 	.word	0x08002e83
 8002cf4:	08002e83 	.word	0x08002e83
 8002cf8:	08002e41 	.word	0x08002e41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f9f8 	bl	80030f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6999      	ldr	r1, [r3, #24]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	619a      	str	r2, [r3, #24]
      break;
 8002d3a:	e0a5      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa54 	bl	80031f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699a      	ldr	r2, [r3, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6999      	ldr	r1, [r3, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	619a      	str	r2, [r3, #24]
      break;
 8002d7c:	e084      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 faad 	bl	80032e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0204 	bic.w	r2, r2, #4
 8002da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69d9      	ldr	r1, [r3, #28]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
      break;
 8002dbc:	e064      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fb05 	bl	80033d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	021a      	lsls	r2, r3, #8
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	61da      	str	r2, [r3, #28]
      break;
 8002dfe:	e043      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fb42 	bl	8003490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e3e:	e023      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fb7a 	bl	8003540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e80:	e002      	b.n	8002e88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
      break;
 8002e86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop

08002e9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_ConfigClockSource+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e0b6      	b.n	8003026 <HAL_TIM_ConfigClockSource+0x18a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef4:	d03e      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0xd8>
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	f200 8087 	bhi.w	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f02:	f000 8086 	beq.w	8003012 <HAL_TIM_ConfigClockSource+0x176>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d87f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d01a      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xaa>
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d87b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f14:	2b60      	cmp	r3, #96	; 0x60
 8002f16:	d050      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x11e>
 8002f18:	2b60      	cmp	r3, #96	; 0x60
 8002f1a:	d877      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f1c:	2b50      	cmp	r3, #80	; 0x50
 8002f1e:	d03c      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xfe>
 8002f20:	2b50      	cmp	r3, #80	; 0x50
 8002f22:	d873      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d058      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x13e>
 8002f28:	2b40      	cmp	r3, #64	; 0x40
 8002f2a:	d86f      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f2c:	2b30      	cmp	r3, #48	; 0x30
 8002f2e:	d064      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15e>
 8002f30:	2b30      	cmp	r3, #48	; 0x30
 8002f32:	d86b      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d060      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15e>
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d867      	bhi.n	800300c <HAL_TIM_ConfigClockSource+0x170>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d05c      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15e>
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d05a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0x15e>
 8002f44:	e062      	b.n	800300c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f56:	f000 fbc7 	bl	80036e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	609a      	str	r2, [r3, #8]
      break;
 8002f72:	e04f      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f84:	f000 fbb0 	bl	80036e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f96:	609a      	str	r2, [r3, #8]
      break;
 8002f98:	e03c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 fb24 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2150      	movs	r1, #80	; 0x50
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fb7d 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e02c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 fb43 	bl	8003652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2160      	movs	r1, #96	; 0x60
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb6d 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e01c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f000 fb04 	bl	80035f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2140      	movs	r1, #64	; 0x40
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fb5d 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8002ff8:	e00c      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fb54 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 800300a:	e003      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
      break;
 8003010:	e000      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <TIM_Base_SetConfig+0xbc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <TIM_Base_SetConfig+0x20>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d108      	bne.n	8003062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <TIM_Base_SetConfig+0xbc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_Base_SetConfig+0x52>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d007      	beq.n	8003082 <TIM_Base_SetConfig+0x52>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <TIM_Base_SetConfig+0xc0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_Base_SetConfig+0x52>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <TIM_Base_SetConfig+0xc4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <TIM_Base_SetConfig+0xbc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_Base_SetConfig+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <TIM_Base_SetConfig+0xc0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0xa0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <TIM_Base_SetConfig+0xc4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d103      	bne.n	80030d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	615a      	str	r2, [r3, #20]
}
 80030de:	bf00      	nop
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400

080030f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f023 0201 	bic.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 0302 	bic.w	r3, r3, #2
 8003144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <TIM_OC1_SetConfig+0xec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_OC1_SetConfig+0x70>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <TIM_OC1_SetConfig+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC1_SetConfig+0x70>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <TIM_OC1_SetConfig+0xf4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10c      	bne.n	8003182 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0308 	bic.w	r3, r3, #8
 800316e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <TIM_OC1_SetConfig+0xec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d007      	beq.n	800319a <TIM_OC1_SetConfig+0xa2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a16      	ldr	r2, [pc, #88]	; (80031e8 <TIM_OC1_SetConfig+0xf0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d003      	beq.n	800319a <TIM_OC1_SetConfig+0xa2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a15      	ldr	r2, [pc, #84]	; (80031ec <TIM_OC1_SetConfig+0xf4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d111      	bne.n	80031be <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400

080031f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 0210 	bic.w	r2, r3, #16
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0320 	bic.w	r3, r3, #32
 800323e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <TIM_OC2_SetConfig+0xe8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d10d      	bne.n	8003270 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a19      	ldr	r2, [pc, #100]	; (80032d8 <TIM_OC2_SetConfig+0xe8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_OC2_SetConfig+0x98>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <TIM_OC2_SetConfig+0xec>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC2_SetConfig+0x98>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <TIM_OC2_SetConfig+0xf0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d113      	bne.n	80032b0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800328e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014000 	.word	0x40014000
 80032e0:	40014400 	.word	0x40014400

080032e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <TIM_OC3_SetConfig+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <TIM_OC3_SetConfig+0xe4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_OC3_SetConfig+0x96>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC3_SetConfig+0xe8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_OC3_SetConfig+0x96>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a16      	ldr	r2, [pc, #88]	; (80033d0 <TIM_OC3_SetConfig+0xec>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d113      	bne.n	80033a2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	40014000 	.word	0x40014000
 80033d0:	40014400 	.word	0x40014400

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	031b      	lsls	r3, r3, #12
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a14      	ldr	r2, [pc, #80]	; (8003484 <TIM_OC4_SetConfig+0xb0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_OC4_SetConfig+0x74>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <TIM_OC4_SetConfig+0xb4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_OC4_SetConfig+0x74>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a12      	ldr	r2, [pc, #72]	; (800348c <TIM_OC4_SetConfig+0xb8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d109      	bne.n	800345c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800344e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40014000 	.word	0x40014000
 800348c:	40014400 	.word	0x40014400

08003490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a13      	ldr	r2, [pc, #76]	; (8003534 <TIM_OC5_SetConfig+0xa4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_OC5_SetConfig+0x6a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a12      	ldr	r2, [pc, #72]	; (8003538 <TIM_OC5_SetConfig+0xa8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_OC5_SetConfig+0x6a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a11      	ldr	r2, [pc, #68]	; (800353c <TIM_OC5_SetConfig+0xac>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d109      	bne.n	800350e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003500:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	621a      	str	r2, [r3, #32]
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400

08003540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	051b      	lsls	r3, r3, #20
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <TIM_OC6_SetConfig+0xa8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_OC6_SetConfig+0x6c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <TIM_OC6_SetConfig+0xac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC6_SetConfig+0x6c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <TIM_OC6_SetConfig+0xb0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d109      	bne.n	80035c0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	621a      	str	r2, [r3, #32]
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400

080035f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003652:	b480      	push	{r7}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 0210 	bic.w	r2, r3, #16
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	609a      	str	r2, [r3, #8]
}
 800371c:	bf00      	nop
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e04f      	b.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003770:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a14      	ldr	r2, [pc, #80]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d009      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d004      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10c      	bne.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800380c:	2302      	movs	r3, #2
 800380e:	e060      	b.n	80038d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4313      	orrs	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d115      	bne.n	80038c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	051b      	lsls	r3, r3, #20
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40012c00 	.word	0x40012c00

080038e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e040      	b.n	8003978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fa98 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2224      	movs	r2, #36	; 0x24
 8003910:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fc2c 	bl	8004188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9cf 	bl	8003cd4 <UART_SetConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e01b      	b.n	8003978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800394e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800395e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fcab 	bl	80042cc <UART_CheckIdleState>
 8003976:	4603      	mov	r3, r0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e048      	b.n	8003a24 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fa4a 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fbde 	bl	8004188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f981 	bl	8003cd4 <UART_SetConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e023      	b.n	8003a24 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80039fa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fc55 	bl	80042cc <UART_CheckIdleState>
 8003a22:	4603      	mov	r3, r0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d178      	bne.n	8003b36 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Transmit+0x24>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e071      	b.n	8003b38 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2221      	movs	r2, #33	; 0x21
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a62:	f7fd fbf5 	bl	8001250 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	88fa      	ldrh	r2, [r7, #6]
 8003a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d108      	bne.n	8003a94 <HAL_UART_Transmit+0x68>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d104      	bne.n	8003a94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e003      	b.n	8003a9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a9c:	e030      	b.n	8003b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fcb7 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e03c      	b.n	8003b38 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	881a      	ldrh	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e008      	b.n	8003aee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3301      	adds	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1c8      	bne.n	8003a9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2140      	movs	r1, #64	; 0x40
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fc80 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d004      	beq.n	8003b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e005      	b.n	8003b38 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	f040 80b6 	bne.w	8003cc8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_UART_Receive+0x28>
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0ae      	b.n	8003cca <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b82:	f7fd fb65 	bl	8001250 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_UART_Receive+0x80>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d105      	bne.n	8003bb6 <HAL_UART_Receive+0x76>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb4:	e02d      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	22ff      	movs	r2, #255	; 0xff
 8003bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bbe:	e028      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_UART_Receive+0xa4>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <HAL_UART_Receive+0x9a>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd8:	e01b      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	227f      	movs	r2, #127	; 0x7f
 8003bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be2:	e016      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bec:	d10d      	bne.n	8003c0a <HAL_UART_Receive+0xca>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <HAL_UART_Receive+0xc0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	227f      	movs	r2, #127	; 0x7f
 8003bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfe:	e008      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	223f      	movs	r2, #63	; 0x3f
 8003c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c08:	e003      	b.n	8003c12 <HAL_UART_Receive+0xd2>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d108      	bne.n	8003c36 <HAL_UART_Receive+0xf6>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	61bb      	str	r3, [r7, #24]
 8003c34:	e003      	b.n	8003c3e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c3e:	e037      	b.n	8003cb0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2120      	movs	r1, #32
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fbe6 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e033      	b.n	8003cca <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10c      	bne.n	8003c82 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	8a7b      	ldrh	r3, [r7, #18]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	e00d      	b.n	8003c9e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	8a7b      	ldrh	r3, [r7, #18]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	4013      	ands	r3, r2
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1c1      	bne.n	8003c40 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd8:	b08a      	sub	sp, #40	; 0x28
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4b9e      	ldr	r3, [pc, #632]	; (8003f7c <UART_SetConfig+0x2a8>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a93      	ldr	r2, [pc, #588]	; (8003f80 <UART_SetConfig+0x2ac>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a8a      	ldr	r2, [pc, #552]	; (8003f84 <UART_SetConfig+0x2b0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d126      	bne.n	8003dac <UART_SetConfig+0xd8>
 8003d5e:	4b8a      	ldr	r3, [pc, #552]	; (8003f88 <UART_SetConfig+0x2b4>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d81b      	bhi.n	8003da4 <UART_SetConfig+0xd0>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0xa0>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9d 	.word	0x08003d9d
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e0ab      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e0a7      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e0a3      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e09f      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e09b      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a76      	ldr	r2, [pc, #472]	; (8003f8c <UART_SetConfig+0x2b8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d138      	bne.n	8003e28 <UART_SetConfig+0x154>
 8003db6:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <UART_SetConfig+0x2b4>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	d82d      	bhi.n	8003e20 <UART_SetConfig+0x14c>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0xf8>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e21 	.word	0x08003e21
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e09 	.word	0x08003e09
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e21 	.word	0x08003e21
 8003dfc:	08003e19 	.word	0x08003e19
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e06:	e06d      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e069      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e10:	2304      	movs	r3, #4
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e065      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e18:	2308      	movs	r3, #8
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e061      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e20:	2310      	movs	r3, #16
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e05d      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <UART_SetConfig+0x2bc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d125      	bne.n	8003e7e <UART_SetConfig+0x1aa>
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <UART_SetConfig+0x2b4>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	d016      	beq.n	8003e6e <UART_SetConfig+0x19a>
 8003e40:	2b30      	cmp	r3, #48	; 0x30
 8003e42:	d818      	bhi.n	8003e76 <UART_SetConfig+0x1a2>
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d00a      	beq.n	8003e5e <UART_SetConfig+0x18a>
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d814      	bhi.n	8003e76 <UART_SetConfig+0x1a2>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <UART_SetConfig+0x182>
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d008      	beq.n	8003e66 <UART_SetConfig+0x192>
 8003e54:	e00f      	b.n	8003e76 <UART_SetConfig+0x1a2>
 8003e56:	2300      	movs	r3, #0
 8003e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5c:	e042      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e64:	e03e      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e66:	2304      	movs	r3, #4
 8003e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6c:	e03a      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e6e:	2308      	movs	r3, #8
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e74:	e036      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e76:	2310      	movs	r3, #16
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7c:	e032      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a3f      	ldr	r2, [pc, #252]	; (8003f80 <UART_SetConfig+0x2ac>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d12a      	bne.n	8003ede <UART_SetConfig+0x20a>
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <UART_SetConfig+0x2b4>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e96:	d01a      	beq.n	8003ece <UART_SetConfig+0x1fa>
 8003e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9c:	d81b      	bhi.n	8003ed6 <UART_SetConfig+0x202>
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea2:	d00c      	beq.n	8003ebe <UART_SetConfig+0x1ea>
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea8:	d815      	bhi.n	8003ed6 <UART_SetConfig+0x202>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <UART_SetConfig+0x1e2>
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d008      	beq.n	8003ec6 <UART_SetConfig+0x1f2>
 8003eb4:	e00f      	b.n	8003ed6 <UART_SetConfig+0x202>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebc:	e012      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec4:	e00e      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ecc:	e00a      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed4:	e006      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003edc:	e002      	b.n	8003ee4 <UART_SetConfig+0x210>
 8003ede:	2310      	movs	r3, #16
 8003ee0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a25      	ldr	r2, [pc, #148]	; (8003f80 <UART_SetConfig+0x2ac>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	f040 808a 	bne.w	8004004 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d824      	bhi.n	8003f42 <UART_SetConfig+0x26e>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x22c>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f33 	.word	0x08003f33
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f43 	.word	0x08003f43
 8003f1c:	08003f43 	.word	0x08003f43
 8003f20:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe fbdc 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e010      	b.n	8003f4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <UART_SetConfig+0x2c0>)
 8003f2e:	61fb      	str	r3, [r7, #28]
        break;
 8003f30:	e00d      	b.n	8003f4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe fb3d 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8003f36:	61f8      	str	r0, [r7, #28]
        break;
 8003f38:	e009      	b.n	8003f4e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	61fb      	str	r3, [r7, #28]
        break;
 8003f40:	e005      	b.n	8003f4e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8109 	beq.w	8004168 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d305      	bcc.n	8003f72 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d912      	bls.n	8003f98 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f78:	e0f6      	b.n	8004168 <UART_SetConfig+0x494>
 8003f7a:	bf00      	nop
 8003f7c:	efff69f3 	.word	0xefff69f3
 8003f80:	40008000 	.word	0x40008000
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40004400 	.word	0x40004400
 8003f90:	40004800 	.word	0x40004800
 8003f94:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	461c      	mov	r4, r3
 8003f9e:	4615      	mov	r5, r2
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	022b      	lsls	r3, r5, #8
 8003faa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fae:	0222      	lsls	r2, r4, #8
 8003fb0:	68f9      	ldr	r1, [r7, #12]
 8003fb2:	6849      	ldr	r1, [r1, #4]
 8003fb4:	0849      	lsrs	r1, r1, #1
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	4688      	mov	r8, r1
 8003fba:	4681      	mov	r9, r0
 8003fbc:	eb12 0a08 	adds.w	sl, r2, r8
 8003fc0:	eb43 0b09 	adc.w	fp, r3, r9
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	607a      	str	r2, [r7, #4]
 8003fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	4659      	mov	r1, fp
 8003fd6:	f7fc f94b 	bl	8000270 <__aeabi_uldivmod>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4613      	mov	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe8:	d308      	bcc.n	8003ffc <UART_SetConfig+0x328>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff0:	d204      	bcs.n	8003ffc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	e0b5      	b.n	8004168 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004002:	e0b1      	b.n	8004168 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	d15d      	bne.n	80040ca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800400e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004012:	2b08      	cmp	r3, #8
 8004014:	d827      	bhi.n	8004066 <UART_SetConfig+0x392>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x348>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe fb4e 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8004044:	61f8      	str	r0, [r7, #28]
        break;
 8004046:	e014      	b.n	8004072 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fb60 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 800404c:	61f8      	str	r0, [r7, #28]
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b4c      	ldr	r3, [pc, #304]	; (8004184 <UART_SetConfig+0x4b0>)
 8004052:	61fb      	str	r3, [r7, #28]
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe faab 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 800405a:	61f8      	str	r0, [r7, #28]
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	61fb      	str	r3, [r7, #28]
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d077      	beq.n	8004168 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	005a      	lsls	r2, r3, #1
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	441a      	add	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b0f      	cmp	r3, #15
 8004092:	d916      	bls.n	80040c2 <UART_SetConfig+0x3ee>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409a:	d212      	bcs.n	80040c2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f023 030f 	bic.w	r3, r3, #15
 80040a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	8afb      	ldrh	r3, [r7, #22]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	8afa      	ldrh	r2, [r7, #22]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	e052      	b.n	8004168 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040c8:	e04e      	b.n	8004168 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d827      	bhi.n	8004122 <UART_SetConfig+0x44e>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <UART_SetConfig+0x404>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	08004105 	.word	0x08004105
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	08004123 	.word	0x08004123
 80040e8:	08004113 	.word	0x08004113
 80040ec:	08004123 	.word	0x08004123
 80040f0:	08004123 	.word	0x08004123
 80040f4:	08004123 	.word	0x08004123
 80040f8:	0800411b 	.word	0x0800411b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fc:	f7fe faf0 	bl	80026e0 <HAL_RCC_GetPCLK1Freq>
 8004100:	61f8      	str	r0, [r7, #28]
        break;
 8004102:	e014      	b.n	800412e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7fe fb02 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8004108:	61f8      	str	r0, [r7, #28]
        break;
 800410a:	e010      	b.n	800412e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <UART_SetConfig+0x4b0>)
 800410e:	61fb      	str	r3, [r7, #28]
        break;
 8004110:	e00d      	b.n	800412e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004112:	f7fe fa4d 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8004116:	61f8      	str	r0, [r7, #28]
        break;
 8004118:	e009      	b.n	800412e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411e:	61fb      	str	r3, [r7, #28]
        break;
 8004120:	e005      	b.n	800412e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800412c:	bf00      	nop
    }

    if (pclk != 0U)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d019      	beq.n	8004168 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	085a      	lsrs	r2, r3, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b0f      	cmp	r3, #15
 800414c:	d909      	bls.n	8004162 <UART_SetConfig+0x48e>
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d205      	bcs.n	8004162 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	e002      	b.n	8004168 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004174:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004178:	4618      	mov	r0, r3
 800417a:	3728      	adds	r7, #40	; 0x28
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	00f42400 	.word	0x00f42400

08004188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01a      	beq.n	800429e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004286:	d10a      	bne.n	800429e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b098      	sub	sp, #96	; 0x60
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042dc:	f7fc ffb8 	bl	8001250 <HAL_GetTick>
 80042e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d12e      	bne.n	800434e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	2200      	movs	r2, #0
 80042fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f88c 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d021      	beq.n	800434e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431e:	653b      	str	r3, [r7, #80]	; 0x50
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
 800432a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800432e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e6      	bne.n	800430a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e062      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d149      	bne.n	80043f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004364:	2200      	movs	r2, #0
 8004366:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f856 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d03c      	beq.n	80043f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	623b      	str	r3, [r7, #32]
   return(result);
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
 8004396:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c8:	61fa      	str	r2, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	69b9      	ldr	r1, [r7, #24]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	617b      	str	r3, [r7, #20]
   return(result);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e011      	b.n	8004414 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3758      	adds	r7, #88	; 0x58
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	e049      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004434:	d045      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fc ff0b 	bl	8001250 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e048      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d031      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d110      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f838 	bl	80044ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2208      	movs	r2, #8
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e029      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d111      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f81e 	bl	80044ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e00f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0a6      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b095      	sub	sp, #84	; 0x54
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004510:	643b      	str	r3, [r7, #64]	; 0x40
 8004512:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e6      	bne.n	80044f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	64bb      	str	r3, [r7, #72]	; 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	2b01      	cmp	r3, #1
 800455e:	d118      	bne.n	8004592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	60bb      	str	r3, [r7, #8]
   return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e6      	bne.n	8004560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045a6:	bf00      	nop
 80045a8:	3754      	adds	r7, #84	; 0x54
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <std>:
 80045b4:	2300      	movs	r3, #0
 80045b6:	b510      	push	{r4, lr}
 80045b8:	4604      	mov	r4, r0
 80045ba:	e9c0 3300 	strd	r3, r3, [r0]
 80045be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045c2:	6083      	str	r3, [r0, #8]
 80045c4:	8181      	strh	r1, [r0, #12]
 80045c6:	6643      	str	r3, [r0, #100]	; 0x64
 80045c8:	81c2      	strh	r2, [r0, #14]
 80045ca:	6183      	str	r3, [r0, #24]
 80045cc:	4619      	mov	r1, r3
 80045ce:	2208      	movs	r2, #8
 80045d0:	305c      	adds	r0, #92	; 0x5c
 80045d2:	f000 f8f4 	bl	80047be <memset>
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <std+0x38>)
 80045d8:	6263      	str	r3, [r4, #36]	; 0x24
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <std+0x3c>)
 80045dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <std+0x40>)
 80045e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <std+0x44>)
 80045e4:	6224      	str	r4, [r4, #32]
 80045e6:	6323      	str	r3, [r4, #48]	; 0x30
 80045e8:	bd10      	pop	{r4, pc}
 80045ea:	bf00      	nop
 80045ec:	08004739 	.word	0x08004739
 80045f0:	0800475b 	.word	0x0800475b
 80045f4:	08004793 	.word	0x08004793
 80045f8:	080047b7 	.word	0x080047b7

080045fc <stdio_exit_handler>:
 80045fc:	4a02      	ldr	r2, [pc, #8]	; (8004608 <stdio_exit_handler+0xc>)
 80045fe:	4903      	ldr	r1, [pc, #12]	; (800460c <stdio_exit_handler+0x10>)
 8004600:	4803      	ldr	r0, [pc, #12]	; (8004610 <stdio_exit_handler+0x14>)
 8004602:	f000 b869 	b.w	80046d8 <_fwalk_sglue>
 8004606:	bf00      	nop
 8004608:	2000000c 	.word	0x2000000c
 800460c:	08005159 	.word	0x08005159
 8004610:	20000018 	.word	0x20000018

08004614 <cleanup_stdio>:
 8004614:	6841      	ldr	r1, [r0, #4]
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <cleanup_stdio+0x34>)
 8004618:	4299      	cmp	r1, r3
 800461a:	b510      	push	{r4, lr}
 800461c:	4604      	mov	r4, r0
 800461e:	d001      	beq.n	8004624 <cleanup_stdio+0x10>
 8004620:	f000 fd9a 	bl	8005158 <_fflush_r>
 8004624:	68a1      	ldr	r1, [r4, #8]
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <cleanup_stdio+0x38>)
 8004628:	4299      	cmp	r1, r3
 800462a:	d002      	beq.n	8004632 <cleanup_stdio+0x1e>
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fd93 	bl	8005158 <_fflush_r>
 8004632:	68e1      	ldr	r1, [r4, #12]
 8004634:	4b06      	ldr	r3, [pc, #24]	; (8004650 <cleanup_stdio+0x3c>)
 8004636:	4299      	cmp	r1, r3
 8004638:	d004      	beq.n	8004644 <cleanup_stdio+0x30>
 800463a:	4620      	mov	r0, r4
 800463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004640:	f000 bd8a 	b.w	8005158 <_fflush_r>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	20000288 	.word	0x20000288
 800464c:	200002f0 	.word	0x200002f0
 8004650:	20000358 	.word	0x20000358

08004654 <global_stdio_init.part.0>:
 8004654:	b510      	push	{r4, lr}
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <global_stdio_init.part.0+0x30>)
 8004658:	4c0b      	ldr	r4, [pc, #44]	; (8004688 <global_stdio_init.part.0+0x34>)
 800465a:	4a0c      	ldr	r2, [pc, #48]	; (800468c <global_stdio_init.part.0+0x38>)
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	4620      	mov	r0, r4
 8004660:	2200      	movs	r2, #0
 8004662:	2104      	movs	r1, #4
 8004664:	f7ff ffa6 	bl	80045b4 <std>
 8004668:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800466c:	2201      	movs	r2, #1
 800466e:	2109      	movs	r1, #9
 8004670:	f7ff ffa0 	bl	80045b4 <std>
 8004674:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004678:	2202      	movs	r2, #2
 800467a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800467e:	2112      	movs	r1, #18
 8004680:	f7ff bf98 	b.w	80045b4 <std>
 8004684:	200003c0 	.word	0x200003c0
 8004688:	20000288 	.word	0x20000288
 800468c:	080045fd 	.word	0x080045fd

08004690 <__sfp_lock_acquire>:
 8004690:	4801      	ldr	r0, [pc, #4]	; (8004698 <__sfp_lock_acquire+0x8>)
 8004692:	f000 b90d 	b.w	80048b0 <__retarget_lock_acquire_recursive>
 8004696:	bf00      	nop
 8004698:	200003c9 	.word	0x200003c9

0800469c <__sfp_lock_release>:
 800469c:	4801      	ldr	r0, [pc, #4]	; (80046a4 <__sfp_lock_release+0x8>)
 800469e:	f000 b908 	b.w	80048b2 <__retarget_lock_release_recursive>
 80046a2:	bf00      	nop
 80046a4:	200003c9 	.word	0x200003c9

080046a8 <__sinit>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4604      	mov	r4, r0
 80046ac:	f7ff fff0 	bl	8004690 <__sfp_lock_acquire>
 80046b0:	6a23      	ldr	r3, [r4, #32]
 80046b2:	b11b      	cbz	r3, 80046bc <__sinit+0x14>
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b8:	f7ff bff0 	b.w	800469c <__sfp_lock_release>
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <__sinit+0x28>)
 80046be:	6223      	str	r3, [r4, #32]
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <__sinit+0x2c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f5      	bne.n	80046b4 <__sinit+0xc>
 80046c8:	f7ff ffc4 	bl	8004654 <global_stdio_init.part.0>
 80046cc:	e7f2      	b.n	80046b4 <__sinit+0xc>
 80046ce:	bf00      	nop
 80046d0:	08004615 	.word	0x08004615
 80046d4:	200003c0 	.word	0x200003c0

080046d8 <_fwalk_sglue>:
 80046d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046dc:	4607      	mov	r7, r0
 80046de:	4688      	mov	r8, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	2600      	movs	r6, #0
 80046e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e8:	f1b9 0901 	subs.w	r9, r9, #1
 80046ec:	d505      	bpl.n	80046fa <_fwalk_sglue+0x22>
 80046ee:	6824      	ldr	r4, [r4, #0]
 80046f0:	2c00      	cmp	r4, #0
 80046f2:	d1f7      	bne.n	80046e4 <_fwalk_sglue+0xc>
 80046f4:	4630      	mov	r0, r6
 80046f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fa:	89ab      	ldrh	r3, [r5, #12]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d907      	bls.n	8004710 <_fwalk_sglue+0x38>
 8004700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004704:	3301      	adds	r3, #1
 8004706:	d003      	beq.n	8004710 <_fwalk_sglue+0x38>
 8004708:	4629      	mov	r1, r5
 800470a:	4638      	mov	r0, r7
 800470c:	47c0      	blx	r8
 800470e:	4306      	orrs	r6, r0
 8004710:	3568      	adds	r5, #104	; 0x68
 8004712:	e7e9      	b.n	80046e8 <_fwalk_sglue+0x10>

08004714 <iprintf>:
 8004714:	b40f      	push	{r0, r1, r2, r3}
 8004716:	b507      	push	{r0, r1, r2, lr}
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <iprintf+0x20>)
 800471a:	ab04      	add	r3, sp, #16
 800471c:	6808      	ldr	r0, [r1, #0]
 800471e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004722:	6881      	ldr	r1, [r0, #8]
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	f000 f9e7 	bl	8004af8 <_vfiprintf_r>
 800472a:	b003      	add	sp, #12
 800472c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004730:	b004      	add	sp, #16
 8004732:	4770      	bx	lr
 8004734:	20000064 	.word	0x20000064

08004738 <__sread>:
 8004738:	b510      	push	{r4, lr}
 800473a:	460c      	mov	r4, r1
 800473c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004740:	f000 f868 	bl	8004814 <_read_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	bfab      	itete	ge
 8004748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800474a:	89a3      	ldrhlt	r3, [r4, #12]
 800474c:	181b      	addge	r3, r3, r0
 800474e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004752:	bfac      	ite	ge
 8004754:	6563      	strge	r3, [r4, #84]	; 0x54
 8004756:	81a3      	strhlt	r3, [r4, #12]
 8004758:	bd10      	pop	{r4, pc}

0800475a <__swrite>:
 800475a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475e:	461f      	mov	r7, r3
 8004760:	898b      	ldrh	r3, [r1, #12]
 8004762:	05db      	lsls	r3, r3, #23
 8004764:	4605      	mov	r5, r0
 8004766:	460c      	mov	r4, r1
 8004768:	4616      	mov	r6, r2
 800476a:	d505      	bpl.n	8004778 <__swrite+0x1e>
 800476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004770:	2302      	movs	r3, #2
 8004772:	2200      	movs	r2, #0
 8004774:	f000 f83c 	bl	80047f0 <_lseek_r>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	4632      	mov	r2, r6
 8004786:	463b      	mov	r3, r7
 8004788:	4628      	mov	r0, r5
 800478a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800478e:	f000 b853 	b.w	8004838 <_write_r>

08004792 <__sseek>:
 8004792:	b510      	push	{r4, lr}
 8004794:	460c      	mov	r4, r1
 8004796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479a:	f000 f829 	bl	80047f0 <_lseek_r>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	bf15      	itete	ne
 80047a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80047a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047ae:	81a3      	strheq	r3, [r4, #12]
 80047b0:	bf18      	it	ne
 80047b2:	81a3      	strhne	r3, [r4, #12]
 80047b4:	bd10      	pop	{r4, pc}

080047b6 <__sclose>:
 80047b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ba:	f000 b809 	b.w	80047d0 <_close_r>

080047be <memset>:
 80047be:	4402      	add	r2, r0
 80047c0:	4603      	mov	r3, r0
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d100      	bne.n	80047c8 <memset+0xa>
 80047c6:	4770      	bx	lr
 80047c8:	f803 1b01 	strb.w	r1, [r3], #1
 80047cc:	e7f9      	b.n	80047c2 <memset+0x4>
	...

080047d0 <_close_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4d06      	ldr	r5, [pc, #24]	; (80047ec <_close_r+0x1c>)
 80047d4:	2300      	movs	r3, #0
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc fc29 	bl	8001032 <_close>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_close_r+0x1a>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_close_r+0x1a>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	200003c4 	.word	0x200003c4

080047f0 <_lseek_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	; (8004810 <_lseek_r+0x20>)
 80047f4:	4604      	mov	r4, r0
 80047f6:	4608      	mov	r0, r1
 80047f8:	4611      	mov	r1, r2
 80047fa:	2200      	movs	r2, #0
 80047fc:	602a      	str	r2, [r5, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	f7fc fc3e 	bl	8001080 <_lseek>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d102      	bne.n	800480e <_lseek_r+0x1e>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b103      	cbz	r3, 800480e <_lseek_r+0x1e>
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	200003c4 	.word	0x200003c4

08004814 <_read_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d07      	ldr	r5, [pc, #28]	; (8004834 <_read_r+0x20>)
 8004818:	4604      	mov	r4, r0
 800481a:	4608      	mov	r0, r1
 800481c:	4611      	mov	r1, r2
 800481e:	2200      	movs	r2, #0
 8004820:	602a      	str	r2, [r5, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	f7fc fbcc 	bl	8000fc0 <_read>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d102      	bne.n	8004832 <_read_r+0x1e>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	b103      	cbz	r3, 8004832 <_read_r+0x1e>
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	200003c4 	.word	0x200003c4

08004838 <_write_r>:
 8004838:	b538      	push	{r3, r4, r5, lr}
 800483a:	4d07      	ldr	r5, [pc, #28]	; (8004858 <_write_r+0x20>)
 800483c:	4604      	mov	r4, r0
 800483e:	4608      	mov	r0, r1
 8004840:	4611      	mov	r1, r2
 8004842:	2200      	movs	r2, #0
 8004844:	602a      	str	r2, [r5, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	f7fc fbd7 	bl	8000ffa <_write>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_write_r+0x1e>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_write_r+0x1e>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	200003c4 	.word	0x200003c4

0800485c <__errno>:
 800485c:	4b01      	ldr	r3, [pc, #4]	; (8004864 <__errno+0x8>)
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20000064 	.word	0x20000064

08004868 <__libc_init_array>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4d0d      	ldr	r5, [pc, #52]	; (80048a0 <__libc_init_array+0x38>)
 800486c:	4c0d      	ldr	r4, [pc, #52]	; (80048a4 <__libc_init_array+0x3c>)
 800486e:	1b64      	subs	r4, r4, r5
 8004870:	10a4      	asrs	r4, r4, #2
 8004872:	2600      	movs	r6, #0
 8004874:	42a6      	cmp	r6, r4
 8004876:	d109      	bne.n	800488c <__libc_init_array+0x24>
 8004878:	4d0b      	ldr	r5, [pc, #44]	; (80048a8 <__libc_init_array+0x40>)
 800487a:	4c0c      	ldr	r4, [pc, #48]	; (80048ac <__libc_init_array+0x44>)
 800487c:	f000 fdbe 	bl	80053fc <_init>
 8004880:	1b64      	subs	r4, r4, r5
 8004882:	10a4      	asrs	r4, r4, #2
 8004884:	2600      	movs	r6, #0
 8004886:	42a6      	cmp	r6, r4
 8004888:	d105      	bne.n	8004896 <__libc_init_array+0x2e>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
 800488c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004890:	4798      	blx	r3
 8004892:	3601      	adds	r6, #1
 8004894:	e7ee      	b.n	8004874 <__libc_init_array+0xc>
 8004896:	f855 3b04 	ldr.w	r3, [r5], #4
 800489a:	4798      	blx	r3
 800489c:	3601      	adds	r6, #1
 800489e:	e7f2      	b.n	8004886 <__libc_init_array+0x1e>
 80048a0:	080054a0 	.word	0x080054a0
 80048a4:	080054a0 	.word	0x080054a0
 80048a8:	080054a0 	.word	0x080054a0
 80048ac:	080054a4 	.word	0x080054a4

080048b0 <__retarget_lock_acquire_recursive>:
 80048b0:	4770      	bx	lr

080048b2 <__retarget_lock_release_recursive>:
 80048b2:	4770      	bx	lr

080048b4 <_free_r>:
 80048b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048b6:	2900      	cmp	r1, #0
 80048b8:	d044      	beq.n	8004944 <_free_r+0x90>
 80048ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048be:	9001      	str	r0, [sp, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f1a1 0404 	sub.w	r4, r1, #4
 80048c6:	bfb8      	it	lt
 80048c8:	18e4      	addlt	r4, r4, r3
 80048ca:	f000 f8df 	bl	8004a8c <__malloc_lock>
 80048ce:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <_free_r+0x94>)
 80048d0:	9801      	ldr	r0, [sp, #4]
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	b933      	cbnz	r3, 80048e4 <_free_r+0x30>
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	6014      	str	r4, [r2, #0]
 80048da:	b003      	add	sp, #12
 80048dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048e0:	f000 b8da 	b.w	8004a98 <__malloc_unlock>
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d908      	bls.n	80048fa <_free_r+0x46>
 80048e8:	6825      	ldr	r5, [r4, #0]
 80048ea:	1961      	adds	r1, r4, r5
 80048ec:	428b      	cmp	r3, r1
 80048ee:	bf01      	itttt	eq
 80048f0:	6819      	ldreq	r1, [r3, #0]
 80048f2:	685b      	ldreq	r3, [r3, #4]
 80048f4:	1949      	addeq	r1, r1, r5
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	e7ed      	b.n	80048d6 <_free_r+0x22>
 80048fa:	461a      	mov	r2, r3
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b10b      	cbz	r3, 8004904 <_free_r+0x50>
 8004900:	42a3      	cmp	r3, r4
 8004902:	d9fa      	bls.n	80048fa <_free_r+0x46>
 8004904:	6811      	ldr	r1, [r2, #0]
 8004906:	1855      	adds	r5, r2, r1
 8004908:	42a5      	cmp	r5, r4
 800490a:	d10b      	bne.n	8004924 <_free_r+0x70>
 800490c:	6824      	ldr	r4, [r4, #0]
 800490e:	4421      	add	r1, r4
 8004910:	1854      	adds	r4, r2, r1
 8004912:	42a3      	cmp	r3, r4
 8004914:	6011      	str	r1, [r2, #0]
 8004916:	d1e0      	bne.n	80048da <_free_r+0x26>
 8004918:	681c      	ldr	r4, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	6053      	str	r3, [r2, #4]
 800491e:	440c      	add	r4, r1
 8004920:	6014      	str	r4, [r2, #0]
 8004922:	e7da      	b.n	80048da <_free_r+0x26>
 8004924:	d902      	bls.n	800492c <_free_r+0x78>
 8004926:	230c      	movs	r3, #12
 8004928:	6003      	str	r3, [r0, #0]
 800492a:	e7d6      	b.n	80048da <_free_r+0x26>
 800492c:	6825      	ldr	r5, [r4, #0]
 800492e:	1961      	adds	r1, r4, r5
 8004930:	428b      	cmp	r3, r1
 8004932:	bf04      	itt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	6063      	str	r3, [r4, #4]
 800493a:	bf04      	itt	eq
 800493c:	1949      	addeq	r1, r1, r5
 800493e:	6021      	streq	r1, [r4, #0]
 8004940:	6054      	str	r4, [r2, #4]
 8004942:	e7ca      	b.n	80048da <_free_r+0x26>
 8004944:	b003      	add	sp, #12
 8004946:	bd30      	pop	{r4, r5, pc}
 8004948:	200003cc 	.word	0x200003cc

0800494c <sbrk_aligned>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4e0e      	ldr	r6, [pc, #56]	; (8004988 <sbrk_aligned+0x3c>)
 8004950:	460c      	mov	r4, r1
 8004952:	6831      	ldr	r1, [r6, #0]
 8004954:	4605      	mov	r5, r0
 8004956:	b911      	cbnz	r1, 800495e <sbrk_aligned+0x12>
 8004958:	f000 fcbc 	bl	80052d4 <_sbrk_r>
 800495c:	6030      	str	r0, [r6, #0]
 800495e:	4621      	mov	r1, r4
 8004960:	4628      	mov	r0, r5
 8004962:	f000 fcb7 	bl	80052d4 <_sbrk_r>
 8004966:	1c43      	adds	r3, r0, #1
 8004968:	d00a      	beq.n	8004980 <sbrk_aligned+0x34>
 800496a:	1cc4      	adds	r4, r0, #3
 800496c:	f024 0403 	bic.w	r4, r4, #3
 8004970:	42a0      	cmp	r0, r4
 8004972:	d007      	beq.n	8004984 <sbrk_aligned+0x38>
 8004974:	1a21      	subs	r1, r4, r0
 8004976:	4628      	mov	r0, r5
 8004978:	f000 fcac 	bl	80052d4 <_sbrk_r>
 800497c:	3001      	adds	r0, #1
 800497e:	d101      	bne.n	8004984 <sbrk_aligned+0x38>
 8004980:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004984:	4620      	mov	r0, r4
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	200003d0 	.word	0x200003d0

0800498c <_malloc_r>:
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	1ccd      	adds	r5, r1, #3
 8004992:	f025 0503 	bic.w	r5, r5, #3
 8004996:	3508      	adds	r5, #8
 8004998:	2d0c      	cmp	r5, #12
 800499a:	bf38      	it	cc
 800499c:	250c      	movcc	r5, #12
 800499e:	2d00      	cmp	r5, #0
 80049a0:	4607      	mov	r7, r0
 80049a2:	db01      	blt.n	80049a8 <_malloc_r+0x1c>
 80049a4:	42a9      	cmp	r1, r5
 80049a6:	d905      	bls.n	80049b4 <_malloc_r+0x28>
 80049a8:	230c      	movs	r3, #12
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	2600      	movs	r6, #0
 80049ae:	4630      	mov	r0, r6
 80049b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a88 <_malloc_r+0xfc>
 80049b8:	f000 f868 	bl	8004a8c <__malloc_lock>
 80049bc:	f8d8 3000 	ldr.w	r3, [r8]
 80049c0:	461c      	mov	r4, r3
 80049c2:	bb5c      	cbnz	r4, 8004a1c <_malloc_r+0x90>
 80049c4:	4629      	mov	r1, r5
 80049c6:	4638      	mov	r0, r7
 80049c8:	f7ff ffc0 	bl	800494c <sbrk_aligned>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	4604      	mov	r4, r0
 80049d0:	d155      	bne.n	8004a7e <_malloc_r+0xf2>
 80049d2:	f8d8 4000 	ldr.w	r4, [r8]
 80049d6:	4626      	mov	r6, r4
 80049d8:	2e00      	cmp	r6, #0
 80049da:	d145      	bne.n	8004a68 <_malloc_r+0xdc>
 80049dc:	2c00      	cmp	r4, #0
 80049de:	d048      	beq.n	8004a72 <_malloc_r+0xe6>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	4631      	mov	r1, r6
 80049e4:	4638      	mov	r0, r7
 80049e6:	eb04 0903 	add.w	r9, r4, r3
 80049ea:	f000 fc73 	bl	80052d4 <_sbrk_r>
 80049ee:	4581      	cmp	r9, r0
 80049f0:	d13f      	bne.n	8004a72 <_malloc_r+0xe6>
 80049f2:	6821      	ldr	r1, [r4, #0]
 80049f4:	1a6d      	subs	r5, r5, r1
 80049f6:	4629      	mov	r1, r5
 80049f8:	4638      	mov	r0, r7
 80049fa:	f7ff ffa7 	bl	800494c <sbrk_aligned>
 80049fe:	3001      	adds	r0, #1
 8004a00:	d037      	beq.n	8004a72 <_malloc_r+0xe6>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	442b      	add	r3, r5
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d038      	beq.n	8004a82 <_malloc_r+0xf6>
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	42a2      	cmp	r2, r4
 8004a14:	d12b      	bne.n	8004a6e <_malloc_r+0xe2>
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e00f      	b.n	8004a3c <_malloc_r+0xb0>
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	1b52      	subs	r2, r2, r5
 8004a20:	d41f      	bmi.n	8004a62 <_malloc_r+0xd6>
 8004a22:	2a0b      	cmp	r2, #11
 8004a24:	d917      	bls.n	8004a56 <_malloc_r+0xca>
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	6025      	str	r5, [r4, #0]
 8004a2c:	bf18      	it	ne
 8004a2e:	6059      	strne	r1, [r3, #4]
 8004a30:	6863      	ldr	r3, [r4, #4]
 8004a32:	bf08      	it	eq
 8004a34:	f8c8 1000 	streq.w	r1, [r8]
 8004a38:	5162      	str	r2, [r4, r5]
 8004a3a:	604b      	str	r3, [r1, #4]
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	f104 060b 	add.w	r6, r4, #11
 8004a42:	f000 f829 	bl	8004a98 <__malloc_unlock>
 8004a46:	f026 0607 	bic.w	r6, r6, #7
 8004a4a:	1d23      	adds	r3, r4, #4
 8004a4c:	1af2      	subs	r2, r6, r3
 8004a4e:	d0ae      	beq.n	80049ae <_malloc_r+0x22>
 8004a50:	1b9b      	subs	r3, r3, r6
 8004a52:	50a3      	str	r3, [r4, r2]
 8004a54:	e7ab      	b.n	80049ae <_malloc_r+0x22>
 8004a56:	42a3      	cmp	r3, r4
 8004a58:	6862      	ldr	r2, [r4, #4]
 8004a5a:	d1dd      	bne.n	8004a18 <_malloc_r+0x8c>
 8004a5c:	f8c8 2000 	str.w	r2, [r8]
 8004a60:	e7ec      	b.n	8004a3c <_malloc_r+0xb0>
 8004a62:	4623      	mov	r3, r4
 8004a64:	6864      	ldr	r4, [r4, #4]
 8004a66:	e7ac      	b.n	80049c2 <_malloc_r+0x36>
 8004a68:	4634      	mov	r4, r6
 8004a6a:	6876      	ldr	r6, [r6, #4]
 8004a6c:	e7b4      	b.n	80049d8 <_malloc_r+0x4c>
 8004a6e:	4613      	mov	r3, r2
 8004a70:	e7cc      	b.n	8004a0c <_malloc_r+0x80>
 8004a72:	230c      	movs	r3, #12
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	4638      	mov	r0, r7
 8004a78:	f000 f80e 	bl	8004a98 <__malloc_unlock>
 8004a7c:	e797      	b.n	80049ae <_malloc_r+0x22>
 8004a7e:	6025      	str	r5, [r4, #0]
 8004a80:	e7dc      	b.n	8004a3c <_malloc_r+0xb0>
 8004a82:	605b      	str	r3, [r3, #4]
 8004a84:	deff      	udf	#255	; 0xff
 8004a86:	bf00      	nop
 8004a88:	200003cc 	.word	0x200003cc

08004a8c <__malloc_lock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__malloc_lock+0x8>)
 8004a8e:	f7ff bf0f 	b.w	80048b0 <__retarget_lock_acquire_recursive>
 8004a92:	bf00      	nop
 8004a94:	200003c8 	.word	0x200003c8

08004a98 <__malloc_unlock>:
 8004a98:	4801      	ldr	r0, [pc, #4]	; (8004aa0 <__malloc_unlock+0x8>)
 8004a9a:	f7ff bf0a 	b.w	80048b2 <__retarget_lock_release_recursive>
 8004a9e:	bf00      	nop
 8004aa0:	200003c8 	.word	0x200003c8

08004aa4 <__sfputc_r>:
 8004aa4:	6893      	ldr	r3, [r2, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	b410      	push	{r4}
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	da08      	bge.n	8004ac2 <__sfputc_r+0x1e>
 8004ab0:	6994      	ldr	r4, [r2, #24]
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	db01      	blt.n	8004aba <__sfputc_r+0x16>
 8004ab6:	290a      	cmp	r1, #10
 8004ab8:	d103      	bne.n	8004ac2 <__sfputc_r+0x1e>
 8004aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004abe:	f000 bb73 	b.w	80051a8 <__swbuf_r>
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	1c58      	adds	r0, r3, #1
 8004ac6:	6010      	str	r0, [r2, #0]
 8004ac8:	7019      	strb	r1, [r3, #0]
 8004aca:	4608      	mov	r0, r1
 8004acc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <__sfputs_r>:
 8004ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad4:	4606      	mov	r6, r0
 8004ad6:	460f      	mov	r7, r1
 8004ad8:	4614      	mov	r4, r2
 8004ada:	18d5      	adds	r5, r2, r3
 8004adc:	42ac      	cmp	r4, r5
 8004ade:	d101      	bne.n	8004ae4 <__sfputs_r+0x12>
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e007      	b.n	8004af4 <__sfputs_r+0x22>
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	463a      	mov	r2, r7
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ffda 	bl	8004aa4 <__sfputc_r>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d1f3      	bne.n	8004adc <__sfputs_r+0xa>
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af8 <_vfiprintf_r>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	460d      	mov	r5, r1
 8004afe:	b09d      	sub	sp, #116	; 0x74
 8004b00:	4614      	mov	r4, r2
 8004b02:	4698      	mov	r8, r3
 8004b04:	4606      	mov	r6, r0
 8004b06:	b118      	cbz	r0, 8004b10 <_vfiprintf_r+0x18>
 8004b08:	6a03      	ldr	r3, [r0, #32]
 8004b0a:	b90b      	cbnz	r3, 8004b10 <_vfiprintf_r+0x18>
 8004b0c:	f7ff fdcc 	bl	80046a8 <__sinit>
 8004b10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b12:	07d9      	lsls	r1, r3, #31
 8004b14:	d405      	bmi.n	8004b22 <_vfiprintf_r+0x2a>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	059a      	lsls	r2, r3, #22
 8004b1a:	d402      	bmi.n	8004b22 <_vfiprintf_r+0x2a>
 8004b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b1e:	f7ff fec7 	bl	80048b0 <__retarget_lock_acquire_recursive>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	d501      	bpl.n	8004b2c <_vfiprintf_r+0x34>
 8004b28:	692b      	ldr	r3, [r5, #16]
 8004b2a:	b99b      	cbnz	r3, 8004b54 <_vfiprintf_r+0x5c>
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 fb78 	bl	8005224 <__swsetup_r>
 8004b34:	b170      	cbz	r0, 8004b54 <_vfiprintf_r+0x5c>
 8004b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b38:	07dc      	lsls	r4, r3, #31
 8004b3a:	d504      	bpl.n	8004b46 <_vfiprintf_r+0x4e>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b40:	b01d      	add	sp, #116	; 0x74
 8004b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b46:	89ab      	ldrh	r3, [r5, #12]
 8004b48:	0598      	lsls	r0, r3, #22
 8004b4a:	d4f7      	bmi.n	8004b3c <_vfiprintf_r+0x44>
 8004b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b4e:	f7ff feb0 	bl	80048b2 <__retarget_lock_release_recursive>
 8004b52:	e7f3      	b.n	8004b3c <_vfiprintf_r+0x44>
 8004b54:	2300      	movs	r3, #0
 8004b56:	9309      	str	r3, [sp, #36]	; 0x24
 8004b58:	2320      	movs	r3, #32
 8004b5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b62:	2330      	movs	r3, #48	; 0x30
 8004b64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004d18 <_vfiprintf_r+0x220>
 8004b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6c:	f04f 0901 	mov.w	r9, #1
 8004b70:	4623      	mov	r3, r4
 8004b72:	469a      	mov	sl, r3
 8004b74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b78:	b10a      	cbz	r2, 8004b7e <_vfiprintf_r+0x86>
 8004b7a:	2a25      	cmp	r2, #37	; 0x25
 8004b7c:	d1f9      	bne.n	8004b72 <_vfiprintf_r+0x7a>
 8004b7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b82:	d00b      	beq.n	8004b9c <_vfiprintf_r+0xa4>
 8004b84:	465b      	mov	r3, fp
 8004b86:	4622      	mov	r2, r4
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff ffa1 	bl	8004ad2 <__sfputs_r>
 8004b90:	3001      	adds	r0, #1
 8004b92:	f000 80a9 	beq.w	8004ce8 <_vfiprintf_r+0x1f0>
 8004b96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b98:	445a      	add	r2, fp
 8004b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 80a1 	beq.w	8004ce8 <_vfiprintf_r+0x1f0>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb0:	f10a 0a01 	add.w	sl, sl, #1
 8004bb4:	9304      	str	r3, [sp, #16]
 8004bb6:	9307      	str	r3, [sp, #28]
 8004bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004bbe:	4654      	mov	r4, sl
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc6:	4854      	ldr	r0, [pc, #336]	; (8004d18 <_vfiprintf_r+0x220>)
 8004bc8:	f7fb fb02 	bl	80001d0 <memchr>
 8004bcc:	9a04      	ldr	r2, [sp, #16]
 8004bce:	b9d8      	cbnz	r0, 8004c08 <_vfiprintf_r+0x110>
 8004bd0:	06d1      	lsls	r1, r2, #27
 8004bd2:	bf44      	itt	mi
 8004bd4:	2320      	movmi	r3, #32
 8004bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bda:	0713      	lsls	r3, r2, #28
 8004bdc:	bf44      	itt	mi
 8004bde:	232b      	movmi	r3, #43	; 0x2b
 8004be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be4:	f89a 3000 	ldrb.w	r3, [sl]
 8004be8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bea:	d015      	beq.n	8004c18 <_vfiprintf_r+0x120>
 8004bec:	9a07      	ldr	r2, [sp, #28]
 8004bee:	4654      	mov	r4, sl
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f04f 0c0a 	mov.w	ip, #10
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfc:	3b30      	subs	r3, #48	; 0x30
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d94d      	bls.n	8004c9e <_vfiprintf_r+0x1a6>
 8004c02:	b1b0      	cbz	r0, 8004c32 <_vfiprintf_r+0x13a>
 8004c04:	9207      	str	r2, [sp, #28]
 8004c06:	e014      	b.n	8004c32 <_vfiprintf_r+0x13a>
 8004c08:	eba0 0308 	sub.w	r3, r0, r8
 8004c0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c10:	4313      	orrs	r3, r2
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	46a2      	mov	sl, r4
 8004c16:	e7d2      	b.n	8004bbe <_vfiprintf_r+0xc6>
 8004c18:	9b03      	ldr	r3, [sp, #12]
 8004c1a:	1d19      	adds	r1, r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	9103      	str	r1, [sp, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bfbb      	ittet	lt
 8004c24:	425b      	neglt	r3, r3
 8004c26:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2a:	9307      	strge	r3, [sp, #28]
 8004c2c:	9307      	strlt	r3, [sp, #28]
 8004c2e:	bfb8      	it	lt
 8004c30:	9204      	strlt	r2, [sp, #16]
 8004c32:	7823      	ldrb	r3, [r4, #0]
 8004c34:	2b2e      	cmp	r3, #46	; 0x2e
 8004c36:	d10c      	bne.n	8004c52 <_vfiprintf_r+0x15a>
 8004c38:	7863      	ldrb	r3, [r4, #1]
 8004c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3c:	d134      	bne.n	8004ca8 <_vfiprintf_r+0x1b0>
 8004c3e:	9b03      	ldr	r3, [sp, #12]
 8004c40:	1d1a      	adds	r2, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9203      	str	r2, [sp, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c4e:	3402      	adds	r4, #2
 8004c50:	9305      	str	r3, [sp, #20]
 8004c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d28 <_vfiprintf_r+0x230>
 8004c56:	7821      	ldrb	r1, [r4, #0]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4650      	mov	r0, sl
 8004c5c:	f7fb fab8 	bl	80001d0 <memchr>
 8004c60:	b138      	cbz	r0, 8004c72 <_vfiprintf_r+0x17a>
 8004c62:	9b04      	ldr	r3, [sp, #16]
 8004c64:	eba0 000a 	sub.w	r0, r0, sl
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	4082      	lsls	r2, r0
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	3401      	adds	r4, #1
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	4829      	ldr	r0, [pc, #164]	; (8004d1c <_vfiprintf_r+0x224>)
 8004c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c7c:	2206      	movs	r2, #6
 8004c7e:	f7fb faa7 	bl	80001d0 <memchr>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d03f      	beq.n	8004d06 <_vfiprintf_r+0x20e>
 8004c86:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <_vfiprintf_r+0x228>)
 8004c88:	bb1b      	cbnz	r3, 8004cd2 <_vfiprintf_r+0x1da>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	3308      	adds	r3, #8
 8004c94:	9303      	str	r3, [sp, #12]
 8004c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c98:	443b      	add	r3, r7
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	e768      	b.n	8004b70 <_vfiprintf_r+0x78>
 8004c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e7a6      	b.n	8004bf6 <_vfiprintf_r+0xfe>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	3401      	adds	r4, #1
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0c0a 	mov.w	ip, #10
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cba:	3a30      	subs	r2, #48	; 0x30
 8004cbc:	2a09      	cmp	r2, #9
 8004cbe:	d903      	bls.n	8004cc8 <_vfiprintf_r+0x1d0>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0c6      	beq.n	8004c52 <_vfiprintf_r+0x15a>
 8004cc4:	9105      	str	r1, [sp, #20]
 8004cc6:	e7c4      	b.n	8004c52 <_vfiprintf_r+0x15a>
 8004cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ccc:	4604      	mov	r4, r0
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e7f0      	b.n	8004cb4 <_vfiprintf_r+0x1bc>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <_vfiprintf_r+0x22c>)
 8004cda:	a904      	add	r1, sp, #16
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f3af 8000 	nop.w
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	1c78      	adds	r0, r7, #1
 8004ce6:	d1d6      	bne.n	8004c96 <_vfiprintf_r+0x19e>
 8004ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	d405      	bmi.n	8004cfa <_vfiprintf_r+0x202>
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	059a      	lsls	r2, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_vfiprintf_r+0x202>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf6:	f7ff fddc 	bl	80048b2 <__retarget_lock_release_recursive>
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	065b      	lsls	r3, r3, #25
 8004cfe:	f53f af1d 	bmi.w	8004b3c <_vfiprintf_r+0x44>
 8004d02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d04:	e71c      	b.n	8004b40 <_vfiprintf_r+0x48>
 8004d06:	ab03      	add	r3, sp, #12
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	462a      	mov	r2, r5
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <_vfiprintf_r+0x22c>)
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 f879 	bl	8004e08 <_printf_i>
 8004d16:	e7e4      	b.n	8004ce2 <_vfiprintf_r+0x1ea>
 8004d18:	08005464 	.word	0x08005464
 8004d1c:	0800546e 	.word	0x0800546e
 8004d20:	00000000 	.word	0x00000000
 8004d24:	08004ad3 	.word	0x08004ad3
 8004d28:	0800546a 	.word	0x0800546a

08004d2c <_printf_common>:
 8004d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	4616      	mov	r6, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	688a      	ldr	r2, [r1, #8]
 8004d36:	690b      	ldr	r3, [r1, #16]
 8004d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bfb8      	it	lt
 8004d40:	4613      	movlt	r3, r2
 8004d42:	6033      	str	r3, [r6, #0]
 8004d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	b10a      	cbz	r2, 8004d52 <_printf_common+0x26>
 8004d4e:	3301      	adds	r3, #1
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	0699      	lsls	r1, r3, #26
 8004d56:	bf42      	ittt	mi
 8004d58:	6833      	ldrmi	r3, [r6, #0]
 8004d5a:	3302      	addmi	r3, #2
 8004d5c:	6033      	strmi	r3, [r6, #0]
 8004d5e:	6825      	ldr	r5, [r4, #0]
 8004d60:	f015 0506 	ands.w	r5, r5, #6
 8004d64:	d106      	bne.n	8004d74 <_printf_common+0x48>
 8004d66:	f104 0a19 	add.w	sl, r4, #25
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	6832      	ldr	r2, [r6, #0]
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dc26      	bgt.n	8004dc2 <_printf_common+0x96>
 8004d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d78:	1e13      	subs	r3, r2, #0
 8004d7a:	6822      	ldr	r2, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	2301      	movne	r3, #1
 8004d80:	0692      	lsls	r2, r2, #26
 8004d82:	d42b      	bmi.n	8004ddc <_printf_common+0xb0>
 8004d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d88:	4649      	mov	r1, r9
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	47c0      	blx	r8
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d01e      	beq.n	8004dd0 <_printf_common+0xa4>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	6922      	ldr	r2, [r4, #16]
 8004d96:	f003 0306 	and.w	r3, r3, #6
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	bf02      	ittt	eq
 8004d9e:	68e5      	ldreq	r5, [r4, #12]
 8004da0:	6833      	ldreq	r3, [r6, #0]
 8004da2:	1aed      	subeq	r5, r5, r3
 8004da4:	68a3      	ldr	r3, [r4, #8]
 8004da6:	bf0c      	ite	eq
 8004da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dac:	2500      	movne	r5, #0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfc4      	itt	gt
 8004db2:	1a9b      	subgt	r3, r3, r2
 8004db4:	18ed      	addgt	r5, r5, r3
 8004db6:	2600      	movs	r6, #0
 8004db8:	341a      	adds	r4, #26
 8004dba:	42b5      	cmp	r5, r6
 8004dbc:	d11a      	bne.n	8004df4 <_printf_common+0xc8>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e008      	b.n	8004dd4 <_printf_common+0xa8>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4638      	mov	r0, r7
 8004dca:	47c0      	blx	r8
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d103      	bne.n	8004dd8 <_printf_common+0xac>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd8:	3501      	adds	r5, #1
 8004dda:	e7c6      	b.n	8004d6a <_printf_common+0x3e>
 8004ddc:	18e1      	adds	r1, r4, r3
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	2030      	movs	r0, #48	; 0x30
 8004de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004de6:	4422      	add	r2, r4
 8004de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004df0:	3302      	adds	r3, #2
 8004df2:	e7c7      	b.n	8004d84 <_printf_common+0x58>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4622      	mov	r2, r4
 8004df8:	4649      	mov	r1, r9
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	47c0      	blx	r8
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d0e6      	beq.n	8004dd0 <_printf_common+0xa4>
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7d9      	b.n	8004dba <_printf_common+0x8e>
	...

08004e08 <_printf_i>:
 8004e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	7e0f      	ldrb	r7, [r1, #24]
 8004e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e10:	2f78      	cmp	r7, #120	; 0x78
 8004e12:	4691      	mov	r9, r2
 8004e14:	4680      	mov	r8, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	469a      	mov	sl, r3
 8004e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e1e:	d807      	bhi.n	8004e30 <_printf_i+0x28>
 8004e20:	2f62      	cmp	r7, #98	; 0x62
 8004e22:	d80a      	bhi.n	8004e3a <_printf_i+0x32>
 8004e24:	2f00      	cmp	r7, #0
 8004e26:	f000 80d4 	beq.w	8004fd2 <_printf_i+0x1ca>
 8004e2a:	2f58      	cmp	r7, #88	; 0x58
 8004e2c:	f000 80c0 	beq.w	8004fb0 <_printf_i+0x1a8>
 8004e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e38:	e03a      	b.n	8004eb0 <_printf_i+0xa8>
 8004e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e3e:	2b15      	cmp	r3, #21
 8004e40:	d8f6      	bhi.n	8004e30 <_printf_i+0x28>
 8004e42:	a101      	add	r1, pc, #4	; (adr r1, 8004e48 <_printf_i+0x40>)
 8004e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	08004eb5 	.word	0x08004eb5
 8004e50:	08004e31 	.word	0x08004e31
 8004e54:	08004e31 	.word	0x08004e31
 8004e58:	08004e31 	.word	0x08004e31
 8004e5c:	08004e31 	.word	0x08004e31
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004e31 	.word	0x08004e31
 8004e68:	08004e31 	.word	0x08004e31
 8004e6c:	08004e31 	.word	0x08004e31
 8004e70:	08004e31 	.word	0x08004e31
 8004e74:	08004fb9 	.word	0x08004fb9
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004f73 	.word	0x08004f73
 8004e80:	08004e31 	.word	0x08004e31
 8004e84:	08004e31 	.word	0x08004e31
 8004e88:	08004fdb 	.word	0x08004fdb
 8004e8c:	08004e31 	.word	0x08004e31
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004e31 	.word	0x08004e31
 8004e98:	08004e31 	.word	0x08004e31
 8004e9c:	08004f7b 	.word	0x08004f7b
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	602a      	str	r2, [r5, #0]
 8004ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e09f      	b.n	8004ff4 <_printf_i+0x1ec>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	0607      	lsls	r7, r0, #24
 8004eba:	f103 0104 	add.w	r1, r3, #4
 8004ebe:	6029      	str	r1, [r5, #0]
 8004ec0:	d501      	bpl.n	8004ec6 <_printf_i+0xbe>
 8004ec2:	681e      	ldr	r6, [r3, #0]
 8004ec4:	e003      	b.n	8004ece <_printf_i+0xc6>
 8004ec6:	0646      	lsls	r6, r0, #25
 8004ec8:	d5fb      	bpl.n	8004ec2 <_printf_i+0xba>
 8004eca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ece:	2e00      	cmp	r6, #0
 8004ed0:	da03      	bge.n	8004eda <_printf_i+0xd2>
 8004ed2:	232d      	movs	r3, #45	; 0x2d
 8004ed4:	4276      	negs	r6, r6
 8004ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eda:	485a      	ldr	r0, [pc, #360]	; (8005044 <_printf_i+0x23c>)
 8004edc:	230a      	movs	r3, #10
 8004ede:	e012      	b.n	8004f06 <_printf_i+0xfe>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	1d19      	adds	r1, r3, #4
 8004ee6:	6029      	str	r1, [r5, #0]
 8004ee8:	0605      	lsls	r5, r0, #24
 8004eea:	d501      	bpl.n	8004ef0 <_printf_i+0xe8>
 8004eec:	681e      	ldr	r6, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <_printf_i+0xee>
 8004ef0:	0641      	lsls	r1, r0, #25
 8004ef2:	d5fb      	bpl.n	8004eec <_printf_i+0xe4>
 8004ef4:	881e      	ldrh	r6, [r3, #0]
 8004ef6:	4853      	ldr	r0, [pc, #332]	; (8005044 <_printf_i+0x23c>)
 8004ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8004efa:	bf0c      	ite	eq
 8004efc:	2308      	moveq	r3, #8
 8004efe:	230a      	movne	r3, #10
 8004f00:	2100      	movs	r1, #0
 8004f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f06:	6865      	ldr	r5, [r4, #4]
 8004f08:	60a5      	str	r5, [r4, #8]
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	bfa2      	ittt	ge
 8004f0e:	6821      	ldrge	r1, [r4, #0]
 8004f10:	f021 0104 	bicge.w	r1, r1, #4
 8004f14:	6021      	strge	r1, [r4, #0]
 8004f16:	b90e      	cbnz	r6, 8004f1c <_printf_i+0x114>
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	d04b      	beq.n	8004fb4 <_printf_i+0x1ac>
 8004f1c:	4615      	mov	r5, r2
 8004f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f22:	fb03 6711 	mls	r7, r3, r1, r6
 8004f26:	5dc7      	ldrb	r7, [r0, r7]
 8004f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f2c:	4637      	mov	r7, r6
 8004f2e:	42bb      	cmp	r3, r7
 8004f30:	460e      	mov	r6, r1
 8004f32:	d9f4      	bls.n	8004f1e <_printf_i+0x116>
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d10b      	bne.n	8004f50 <_printf_i+0x148>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	07de      	lsls	r6, r3, #31
 8004f3c:	d508      	bpl.n	8004f50 <_printf_i+0x148>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	6861      	ldr	r1, [r4, #4]
 8004f42:	4299      	cmp	r1, r3
 8004f44:	bfde      	ittt	le
 8004f46:	2330      	movle	r3, #48	; 0x30
 8004f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f50:	1b52      	subs	r2, r2, r5
 8004f52:	6122      	str	r2, [r4, #16]
 8004f54:	f8cd a000 	str.w	sl, [sp]
 8004f58:	464b      	mov	r3, r9
 8004f5a:	aa03      	add	r2, sp, #12
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	4640      	mov	r0, r8
 8004f60:	f7ff fee4 	bl	8004d2c <_printf_common>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d14a      	bne.n	8004ffe <_printf_i+0x1f6>
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f6c:	b004      	add	sp, #16
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f043 0320 	orr.w	r3, r3, #32
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	4833      	ldr	r0, [pc, #204]	; (8005048 <_printf_i+0x240>)
 8004f7c:	2778      	movs	r7, #120	; 0x78
 8004f7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	6829      	ldr	r1, [r5, #0]
 8004f86:	061f      	lsls	r7, r3, #24
 8004f88:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f8c:	d402      	bmi.n	8004f94 <_printf_i+0x18c>
 8004f8e:	065f      	lsls	r7, r3, #25
 8004f90:	bf48      	it	mi
 8004f92:	b2b6      	uxthmi	r6, r6
 8004f94:	07df      	lsls	r7, r3, #31
 8004f96:	bf48      	it	mi
 8004f98:	f043 0320 	orrmi.w	r3, r3, #32
 8004f9c:	6029      	str	r1, [r5, #0]
 8004f9e:	bf48      	it	mi
 8004fa0:	6023      	strmi	r3, [r4, #0]
 8004fa2:	b91e      	cbnz	r6, 8004fac <_printf_i+0x1a4>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	f023 0320 	bic.w	r3, r3, #32
 8004faa:	6023      	str	r3, [r4, #0]
 8004fac:	2310      	movs	r3, #16
 8004fae:	e7a7      	b.n	8004f00 <_printf_i+0xf8>
 8004fb0:	4824      	ldr	r0, [pc, #144]	; (8005044 <_printf_i+0x23c>)
 8004fb2:	e7e4      	b.n	8004f7e <_printf_i+0x176>
 8004fb4:	4615      	mov	r5, r2
 8004fb6:	e7bd      	b.n	8004f34 <_printf_i+0x12c>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6961      	ldr	r1, [r4, #20]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1c4>
 8004fc8:	6019      	str	r1, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1ca>
 8004fcc:	0670      	lsls	r0, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c0>
 8004fd0:	8019      	strh	r1, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	e7bc      	b.n	8004f54 <_printf_i+0x14c>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb f8f2 	bl	80001d0 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1ea>
 8004fee:	1b40      	subs	r0, r0, r5
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7aa      	b.n	8004f54 <_printf_i+0x14c>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	462a      	mov	r2, r5
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ad      	beq.n	8004f68 <_printf_i+0x160>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x232>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a6      	b.n	8004f6c <_printf_i+0x164>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09d      	beq.n	8004f68 <_printf_i+0x160>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x216>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x20a>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x226>
 8005042:	bf00      	nop
 8005044:	08005475 	.word	0x08005475
 8005048:	08005486 	.word	0x08005486

0800504c <__sflush_r>:
 800504c:	898a      	ldrh	r2, [r1, #12]
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	4605      	mov	r5, r0
 8005054:	0710      	lsls	r0, r2, #28
 8005056:	460c      	mov	r4, r1
 8005058:	d458      	bmi.n	800510c <__sflush_r+0xc0>
 800505a:	684b      	ldr	r3, [r1, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	dc05      	bgt.n	800506c <__sflush_r+0x20>
 8005060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	dc02      	bgt.n	800506c <__sflush_r+0x20>
 8005066:	2000      	movs	r0, #0
 8005068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800506c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800506e:	2e00      	cmp	r6, #0
 8005070:	d0f9      	beq.n	8005066 <__sflush_r+0x1a>
 8005072:	2300      	movs	r3, #0
 8005074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005078:	682f      	ldr	r7, [r5, #0]
 800507a:	6a21      	ldr	r1, [r4, #32]
 800507c:	602b      	str	r3, [r5, #0]
 800507e:	d032      	beq.n	80050e6 <__sflush_r+0x9a>
 8005080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	075a      	lsls	r2, r3, #29
 8005086:	d505      	bpl.n	8005094 <__sflush_r+0x48>
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	1ac0      	subs	r0, r0, r3
 800508c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800508e:	b10b      	cbz	r3, 8005094 <__sflush_r+0x48>
 8005090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005092:	1ac0      	subs	r0, r0, r3
 8005094:	2300      	movs	r3, #0
 8005096:	4602      	mov	r2, r0
 8005098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800509a:	6a21      	ldr	r1, [r4, #32]
 800509c:	4628      	mov	r0, r5
 800509e:	47b0      	blx	r6
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	d106      	bne.n	80050b4 <__sflush_r+0x68>
 80050a6:	6829      	ldr	r1, [r5, #0]
 80050a8:	291d      	cmp	r1, #29
 80050aa:	d82b      	bhi.n	8005104 <__sflush_r+0xb8>
 80050ac:	4a29      	ldr	r2, [pc, #164]	; (8005154 <__sflush_r+0x108>)
 80050ae:	410a      	asrs	r2, r1
 80050b0:	07d6      	lsls	r6, r2, #31
 80050b2:	d427      	bmi.n	8005104 <__sflush_r+0xb8>
 80050b4:	2200      	movs	r2, #0
 80050b6:	6062      	str	r2, [r4, #4]
 80050b8:	04d9      	lsls	r1, r3, #19
 80050ba:	6922      	ldr	r2, [r4, #16]
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	d504      	bpl.n	80050ca <__sflush_r+0x7e>
 80050c0:	1c42      	adds	r2, r0, #1
 80050c2:	d101      	bne.n	80050c8 <__sflush_r+0x7c>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b903      	cbnz	r3, 80050ca <__sflush_r+0x7e>
 80050c8:	6560      	str	r0, [r4, #84]	; 0x54
 80050ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050cc:	602f      	str	r7, [r5, #0]
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d0c9      	beq.n	8005066 <__sflush_r+0x1a>
 80050d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d6:	4299      	cmp	r1, r3
 80050d8:	d002      	beq.n	80050e0 <__sflush_r+0x94>
 80050da:	4628      	mov	r0, r5
 80050dc:	f7ff fbea 	bl	80048b4 <_free_r>
 80050e0:	2000      	movs	r0, #0
 80050e2:	6360      	str	r0, [r4, #52]	; 0x34
 80050e4:	e7c0      	b.n	8005068 <__sflush_r+0x1c>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b0      	blx	r6
 80050ec:	1c41      	adds	r1, r0, #1
 80050ee:	d1c8      	bne.n	8005082 <__sflush_r+0x36>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0c5      	beq.n	8005082 <__sflush_r+0x36>
 80050f6:	2b1d      	cmp	r3, #29
 80050f8:	d001      	beq.n	80050fe <__sflush_r+0xb2>
 80050fa:	2b16      	cmp	r3, #22
 80050fc:	d101      	bne.n	8005102 <__sflush_r+0xb6>
 80050fe:	602f      	str	r7, [r5, #0]
 8005100:	e7b1      	b.n	8005066 <__sflush_r+0x1a>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	e7ad      	b.n	8005068 <__sflush_r+0x1c>
 800510c:	690f      	ldr	r7, [r1, #16]
 800510e:	2f00      	cmp	r7, #0
 8005110:	d0a9      	beq.n	8005066 <__sflush_r+0x1a>
 8005112:	0793      	lsls	r3, r2, #30
 8005114:	680e      	ldr	r6, [r1, #0]
 8005116:	bf08      	it	eq
 8005118:	694b      	ldreq	r3, [r1, #20]
 800511a:	600f      	str	r7, [r1, #0]
 800511c:	bf18      	it	ne
 800511e:	2300      	movne	r3, #0
 8005120:	eba6 0807 	sub.w	r8, r6, r7
 8005124:	608b      	str	r3, [r1, #8]
 8005126:	f1b8 0f00 	cmp.w	r8, #0
 800512a:	dd9c      	ble.n	8005066 <__sflush_r+0x1a>
 800512c:	6a21      	ldr	r1, [r4, #32]
 800512e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005130:	4643      	mov	r3, r8
 8005132:	463a      	mov	r2, r7
 8005134:	4628      	mov	r0, r5
 8005136:	47b0      	blx	r6
 8005138:	2800      	cmp	r0, #0
 800513a:	dc06      	bgt.n	800514a <__sflush_r+0xfe>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005148:	e78e      	b.n	8005068 <__sflush_r+0x1c>
 800514a:	4407      	add	r7, r0
 800514c:	eba8 0800 	sub.w	r8, r8, r0
 8005150:	e7e9      	b.n	8005126 <__sflush_r+0xda>
 8005152:	bf00      	nop
 8005154:	dfbffffe 	.word	0xdfbffffe

08005158 <_fflush_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	690b      	ldr	r3, [r1, #16]
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	b913      	cbnz	r3, 8005168 <_fflush_r+0x10>
 8005162:	2500      	movs	r5, #0
 8005164:	4628      	mov	r0, r5
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	b118      	cbz	r0, 8005172 <_fflush_r+0x1a>
 800516a:	6a03      	ldr	r3, [r0, #32]
 800516c:	b90b      	cbnz	r3, 8005172 <_fflush_r+0x1a>
 800516e:	f7ff fa9b 	bl	80046a8 <__sinit>
 8005172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f3      	beq.n	8005162 <_fflush_r+0xa>
 800517a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800517c:	07d0      	lsls	r0, r2, #31
 800517e:	d404      	bmi.n	800518a <_fflush_r+0x32>
 8005180:	0599      	lsls	r1, r3, #22
 8005182:	d402      	bmi.n	800518a <_fflush_r+0x32>
 8005184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005186:	f7ff fb93 	bl	80048b0 <__retarget_lock_acquire_recursive>
 800518a:	4628      	mov	r0, r5
 800518c:	4621      	mov	r1, r4
 800518e:	f7ff ff5d 	bl	800504c <__sflush_r>
 8005192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005194:	07da      	lsls	r2, r3, #31
 8005196:	4605      	mov	r5, r0
 8005198:	d4e4      	bmi.n	8005164 <_fflush_r+0xc>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	059b      	lsls	r3, r3, #22
 800519e:	d4e1      	bmi.n	8005164 <_fflush_r+0xc>
 80051a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051a2:	f7ff fb86 	bl	80048b2 <__retarget_lock_release_recursive>
 80051a6:	e7dd      	b.n	8005164 <_fflush_r+0xc>

080051a8 <__swbuf_r>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	460e      	mov	r6, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	4605      	mov	r5, r0
 80051b0:	b118      	cbz	r0, 80051ba <__swbuf_r+0x12>
 80051b2:	6a03      	ldr	r3, [r0, #32]
 80051b4:	b90b      	cbnz	r3, 80051ba <__swbuf_r+0x12>
 80051b6:	f7ff fa77 	bl	80046a8 <__sinit>
 80051ba:	69a3      	ldr	r3, [r4, #24]
 80051bc:	60a3      	str	r3, [r4, #8]
 80051be:	89a3      	ldrh	r3, [r4, #12]
 80051c0:	071a      	lsls	r2, r3, #28
 80051c2:	d525      	bpl.n	8005210 <__swbuf_r+0x68>
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	b31b      	cbz	r3, 8005210 <__swbuf_r+0x68>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	6922      	ldr	r2, [r4, #16]
 80051cc:	1a98      	subs	r0, r3, r2
 80051ce:	6963      	ldr	r3, [r4, #20]
 80051d0:	b2f6      	uxtb	r6, r6
 80051d2:	4283      	cmp	r3, r0
 80051d4:	4637      	mov	r7, r6
 80051d6:	dc04      	bgt.n	80051e2 <__swbuf_r+0x3a>
 80051d8:	4621      	mov	r1, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	f7ff ffbc 	bl	8005158 <_fflush_r>
 80051e0:	b9e0      	cbnz	r0, 800521c <__swbuf_r+0x74>
 80051e2:	68a3      	ldr	r3, [r4, #8]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	60a3      	str	r3, [r4, #8]
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	6022      	str	r2, [r4, #0]
 80051ee:	701e      	strb	r6, [r3, #0]
 80051f0:	6962      	ldr	r2, [r4, #20]
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d004      	beq.n	8005202 <__swbuf_r+0x5a>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	07db      	lsls	r3, r3, #31
 80051fc:	d506      	bpl.n	800520c <__swbuf_r+0x64>
 80051fe:	2e0a      	cmp	r6, #10
 8005200:	d104      	bne.n	800520c <__swbuf_r+0x64>
 8005202:	4621      	mov	r1, r4
 8005204:	4628      	mov	r0, r5
 8005206:	f7ff ffa7 	bl	8005158 <_fflush_r>
 800520a:	b938      	cbnz	r0, 800521c <__swbuf_r+0x74>
 800520c:	4638      	mov	r0, r7
 800520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005210:	4621      	mov	r1, r4
 8005212:	4628      	mov	r0, r5
 8005214:	f000 f806 	bl	8005224 <__swsetup_r>
 8005218:	2800      	cmp	r0, #0
 800521a:	d0d5      	beq.n	80051c8 <__swbuf_r+0x20>
 800521c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005220:	e7f4      	b.n	800520c <__swbuf_r+0x64>
	...

08005224 <__swsetup_r>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <__swsetup_r+0xac>)
 8005228:	4605      	mov	r5, r0
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	460c      	mov	r4, r1
 800522e:	b118      	cbz	r0, 8005238 <__swsetup_r+0x14>
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	b90b      	cbnz	r3, 8005238 <__swsetup_r+0x14>
 8005234:	f7ff fa38 	bl	80046a8 <__sinit>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800523e:	0718      	lsls	r0, r3, #28
 8005240:	d422      	bmi.n	8005288 <__swsetup_r+0x64>
 8005242:	06d9      	lsls	r1, r3, #27
 8005244:	d407      	bmi.n	8005256 <__swsetup_r+0x32>
 8005246:	2309      	movs	r3, #9
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800524e:	81a3      	strh	r3, [r4, #12]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005254:	e034      	b.n	80052c0 <__swsetup_r+0x9c>
 8005256:	0758      	lsls	r0, r3, #29
 8005258:	d512      	bpl.n	8005280 <__swsetup_r+0x5c>
 800525a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800525c:	b141      	cbz	r1, 8005270 <__swsetup_r+0x4c>
 800525e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005262:	4299      	cmp	r1, r3
 8005264:	d002      	beq.n	800526c <__swsetup_r+0x48>
 8005266:	4628      	mov	r0, r5
 8005268:	f7ff fb24 	bl	80048b4 <_free_r>
 800526c:	2300      	movs	r3, #0
 800526e:	6363      	str	r3, [r4, #52]	; 0x34
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005276:	81a3      	strh	r3, [r4, #12]
 8005278:	2300      	movs	r3, #0
 800527a:	6063      	str	r3, [r4, #4]
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	f043 0308 	orr.w	r3, r3, #8
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	b94b      	cbnz	r3, 80052a0 <__swsetup_r+0x7c>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005296:	d003      	beq.n	80052a0 <__swsetup_r+0x7c>
 8005298:	4621      	mov	r1, r4
 800529a:	4628      	mov	r0, r5
 800529c:	f000 f850 	bl	8005340 <__smakebuf_r>
 80052a0:	89a0      	ldrh	r0, [r4, #12]
 80052a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052a6:	f010 0301 	ands.w	r3, r0, #1
 80052aa:	d00a      	beq.n	80052c2 <__swsetup_r+0x9e>
 80052ac:	2300      	movs	r3, #0
 80052ae:	60a3      	str	r3, [r4, #8]
 80052b0:	6963      	ldr	r3, [r4, #20]
 80052b2:	425b      	negs	r3, r3
 80052b4:	61a3      	str	r3, [r4, #24]
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	b943      	cbnz	r3, 80052cc <__swsetup_r+0xa8>
 80052ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052be:	d1c4      	bne.n	800524a <__swsetup_r+0x26>
 80052c0:	bd38      	pop	{r3, r4, r5, pc}
 80052c2:	0781      	lsls	r1, r0, #30
 80052c4:	bf58      	it	pl
 80052c6:	6963      	ldrpl	r3, [r4, #20]
 80052c8:	60a3      	str	r3, [r4, #8]
 80052ca:	e7f4      	b.n	80052b6 <__swsetup_r+0x92>
 80052cc:	2000      	movs	r0, #0
 80052ce:	e7f7      	b.n	80052c0 <__swsetup_r+0x9c>
 80052d0:	20000064 	.word	0x20000064

080052d4 <_sbrk_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	; (80052f0 <_sbrk_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fb fedc 	bl	800109c <_sbrk>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_sbrk_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_sbrk_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200003c4 	.word	0x200003c4

080052f4 <__swhatbuf_r>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	460c      	mov	r4, r1
 80052f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fc:	2900      	cmp	r1, #0
 80052fe:	b096      	sub	sp, #88	; 0x58
 8005300:	4615      	mov	r5, r2
 8005302:	461e      	mov	r6, r3
 8005304:	da0d      	bge.n	8005322 <__swhatbuf_r+0x2e>
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	f013 0f80 	tst.w	r3, #128	; 0x80
 800530c:	f04f 0100 	mov.w	r1, #0
 8005310:	bf0c      	ite	eq
 8005312:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005316:	2340      	movne	r3, #64	; 0x40
 8005318:	2000      	movs	r0, #0
 800531a:	6031      	str	r1, [r6, #0]
 800531c:	602b      	str	r3, [r5, #0]
 800531e:	b016      	add	sp, #88	; 0x58
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	466a      	mov	r2, sp
 8005324:	f000 f848 	bl	80053b8 <_fstat_r>
 8005328:	2800      	cmp	r0, #0
 800532a:	dbec      	blt.n	8005306 <__swhatbuf_r+0x12>
 800532c:	9901      	ldr	r1, [sp, #4]
 800532e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005332:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005336:	4259      	negs	r1, r3
 8005338:	4159      	adcs	r1, r3
 800533a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533e:	e7eb      	b.n	8005318 <__swhatbuf_r+0x24>

08005340 <__smakebuf_r>:
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005344:	079d      	lsls	r5, r3, #30
 8005346:	4606      	mov	r6, r0
 8005348:	460c      	mov	r4, r1
 800534a:	d507      	bpl.n	800535c <__smakebuf_r+0x1c>
 800534c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	2301      	movs	r3, #1
 8005356:	6163      	str	r3, [r4, #20]
 8005358:	b002      	add	sp, #8
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	ab01      	add	r3, sp, #4
 800535e:	466a      	mov	r2, sp
 8005360:	f7ff ffc8 	bl	80052f4 <__swhatbuf_r>
 8005364:	9900      	ldr	r1, [sp, #0]
 8005366:	4605      	mov	r5, r0
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff fb0f 	bl	800498c <_malloc_r>
 800536e:	b948      	cbnz	r0, 8005384 <__smakebuf_r+0x44>
 8005370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005374:	059a      	lsls	r2, r3, #22
 8005376:	d4ef      	bmi.n	8005358 <__smakebuf_r+0x18>
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	e7e3      	b.n	800534c <__smakebuf_r+0xc>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	6020      	str	r0, [r4, #0]
 8005388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	6163      	str	r3, [r4, #20]
 8005392:	9b01      	ldr	r3, [sp, #4]
 8005394:	6120      	str	r0, [r4, #16]
 8005396:	b15b      	cbz	r3, 80053b0 <__smakebuf_r+0x70>
 8005398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539c:	4630      	mov	r0, r6
 800539e:	f000 f81d 	bl	80053dc <_isatty_r>
 80053a2:	b128      	cbz	r0, 80053b0 <__smakebuf_r+0x70>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f023 0303 	bic.w	r3, r3, #3
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	431d      	orrs	r5, r3
 80053b4:	81a5      	strh	r5, [r4, #12]
 80053b6:	e7cf      	b.n	8005358 <__smakebuf_r+0x18>

080053b8 <_fstat_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d07      	ldr	r5, [pc, #28]	; (80053d8 <_fstat_r+0x20>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	f7fb fe40 	bl	800104a <_fstat>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	d102      	bne.n	80053d4 <_fstat_r+0x1c>
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	b103      	cbz	r3, 80053d4 <_fstat_r+0x1c>
 80053d2:	6023      	str	r3, [r4, #0]
 80053d4:	bd38      	pop	{r3, r4, r5, pc}
 80053d6:	bf00      	nop
 80053d8:	200003c4 	.word	0x200003c4

080053dc <_isatty_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4d06      	ldr	r5, [pc, #24]	; (80053f8 <_isatty_r+0x1c>)
 80053e0:	2300      	movs	r3, #0
 80053e2:	4604      	mov	r4, r0
 80053e4:	4608      	mov	r0, r1
 80053e6:	602b      	str	r3, [r5, #0]
 80053e8:	f7fb fe3f 	bl	800106a <_isatty>
 80053ec:	1c43      	adds	r3, r0, #1
 80053ee:	d102      	bne.n	80053f6 <_isatty_r+0x1a>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	b103      	cbz	r3, 80053f6 <_isatty_r+0x1a>
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	200003c4 	.word	0x200003c4

080053fc <_init>:
 80053fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fe:	bf00      	nop
 8005400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005402:	bc08      	pop	{r3}
 8005404:	469e      	mov	lr, r3
 8005406:	4770      	bx	lr

08005408 <_fini>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr
